{"version":3,"file":"managementClient.js","sourceRoot":"","sources":["../../src/managementClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport uuid from \"uuid/v4\";\nimport {\n  RequestResponseLink,\n  defaultLock,\n  translate,\n  Constants,\n  SendRequestOptions,\n  retry,\n  RetryConfig,\n  RetryOptions,\n  RetryOperationType,\n  SharedKeyCredential\n} from \"@azure/core-amqp\";\nimport {\n  Message,\n  EventContext,\n  SenderEvents,\n  ReceiverEvents,\n  SenderOptions,\n  ReceiverOptions,\n  generate_uuid\n} from \"rhea-promise\";\nimport { ConnectionContext } from \"./connectionContext\";\nimport { LinkEntity } from \"./linkEntity\";\nimport { logger, logErrorStackTrace } from \"./log\";\nimport { getRetryAttemptTimeoutInMs } from \"./util/retries\";\nimport { AbortSignalLike, AbortError } from \"@azure/abort-controller\";\n/**\n * Describes the runtime information of an Event Hub.\n * @interface HubRuntimeInformation\n */\nexport interface EventHubProperties {\n  /**\n   * @property The name of the event hub.\n   */\n  name: string;\n  /**\n   * @property The date and time the hub was created in UTC.\n   */\n  createdOn: Date;\n  /**\n   * @property The slice of string partition identifiers.\n   */\n  partitionIds: string[];\n}\n\n/**\n * Describes the runtime information of an EventHub Partition.\n * @interface PartitionProperties\n */\nexport interface PartitionProperties {\n  /**\n   * @property The name of the Event Hub.\n   */\n  eventHubName: string;\n  /**\n   * @property Identifier of the partition within the Event Hub.\n   */\n  partitionId: string;\n  /**\n   * @property The starting sequence number of the partition's message log.\n   */\n  beginningSequenceNumber: number;\n  /**\n   * @property The last sequence number of the partition's message log.\n   */\n  lastEnqueuedSequenceNumber: number;\n  /**\n   * @property The offset of the last enqueued message in the partition's message log.\n   */\n  lastEnqueuedOffset: number;\n  /**\n   * @property The time of the last enqueued message in the partition's message log in UTC.\n   */\n  lastEnqueuedOnUtc: Date;\n  /**\n   * @property Indicates whether the partition is empty.\n   */\n  isEmpty: boolean;\n}\n\n/**\n * @internal\n * @ignore\n */\nexport interface ManagementClientOptions {\n  address?: string;\n  audience?: string;\n}\n\n/**\n * @class ManagementClient\n * @internal\n * @ignore\n * Descibes the EventHubs Management Client that talks\n * to the $management endpoint over AMQP connection.\n */\nexport class ManagementClient extends LinkEntity {\n  readonly managementLock: string = `${Constants.managementRequestKey}-${uuid()}`;\n  /**\n   * @property entityPath - The name/path of the entity (hub name) for which the management\n   * request needs to be made.\n   */\n  entityPath: string;\n  /**\n   * @property replyTo The reply to Guid for the management client.\n   */\n  replyTo: string = uuid();\n  /**\n   * $management sender, receiver on the same session.\n   * @private\n   */\n  private _mgmtReqResLink?: RequestResponseLink;\n\n  /**\n   * Instantiates the management client.\n   * @constructor\n   * @ignore\n   * @param context The connection context.\n   * @param [address] The address for the management endpoint. For IotHub it will be\n   * `/messages/events/$management`.\n   */\n  constructor(context: ConnectionContext, options?: ManagementClientOptions) {\n    super(context, {\n      address: options && options.address ? options.address : Constants.management,\n      audience:\n        options && options.audience ? options.audience : context.config.getManagementAudience()\n    });\n    this._context = context;\n    this.entityPath = context.config.entityPath as string;\n  }\n\n  /**\n   * Gets the security token for the management application properties.\n   * @ignore\n   * @internal\n   */\n  async getSecurityToken() {\n    if (this._context.tokenCredential instanceof SharedKeyCredential) {\n      // the security_token has the $management address removed from the end of the audience\n      // expected audience: sb://fully.qualified.namespace/event-hub-name/$management\n      const audienceParts = this.audience.split(\"/\");\n      // for management links, address should be '$management'\n      if (audienceParts[audienceParts.length - 1] === this.address) {\n        audienceParts.pop();\n      }\n      const audience = audienceParts.join(\"/\");\n      return this._context.tokenCredential.getToken(audience);\n    }\n\n    // aad credentials use the aad scope\n    return this._context.tokenCredential.getToken(Constants.aadEventHubsScope);\n  }\n\n  /**\n   * Provides the eventhub runtime information.\n   * @ignore\n   * @param connection - The established amqp connection\n   * @returns\n   */\n  async getHubRuntimeInformation(options?: {\n    retryOptions?: RetryOptions;\n    abortSignal?: AbortSignalLike;\n  }): Promise<EventHubProperties> {\n    if (!options) {\n      options = {};\n    }\n    const securityToken = await this.getSecurityToken();\n    const request: Message = {\n      body: Buffer.from(JSON.stringify([])),\n      message_id: uuid(),\n      reply_to: this.replyTo,\n      application_properties: {\n        operation: Constants.readOperation,\n        name: this.entityPath as string,\n        type: `${Constants.vendorString}:${Constants.eventHub}`,\n        security_token: securityToken?.token\n      }\n    };\n\n    const info: any = await this._makeManagementRequest(request, {\n      ...options,\n      requestName: \"getHubRuntimeInformation\"\n    });\n    const runtimeInfo: EventHubProperties = {\n      name: info.name,\n      createdOn: new Date(info.created_at),\n      partitionIds: info.partition_ids\n    };\n    logger.verbose(\"[%s] The hub runtime info is: %O\", this._context.connectionId, runtimeInfo);\n    return runtimeInfo;\n  }\n\n  /**\n   * Provides an array of partitionIds.\n   * @ignore\n   * @param connection - The established amqp connection\n   * @returns\n   */\n  async getPartitionIds(): Promise<Array<string>> {\n    const runtimeInfo = await this.getHubRuntimeInformation();\n    return runtimeInfo.partitionIds;\n  }\n\n  /**\n   * Provides information about the specified partition.\n   * @ignore\n   * @param connection - The established amqp connection\n   * @param partitionId Partition ID for which partition information is required.\n   */\n  async getPartitionProperties(\n    partitionId: string,\n    options?: { retryOptions?: RetryOptions; abortSignal?: AbortSignalLike }\n  ): Promise<PartitionProperties> {\n    if (!options) {\n      options = {};\n    }\n    const securityToken = await this.getSecurityToken();\n    const request: Message = {\n      body: Buffer.from(JSON.stringify([])),\n      message_id: uuid(),\n      reply_to: this.replyTo,\n      application_properties: {\n        operation: Constants.readOperation,\n        name: this.entityPath as string,\n        type: `${Constants.vendorString}:${Constants.partition}`,\n        partition: `${partitionId}`,\n        security_token: securityToken?.token\n      }\n    };\n\n    const info: any = await this._makeManagementRequest(request, {\n      ...options,\n      requestName: \"getPartitionInformation\"\n    });\n\n    const partitionInfo: PartitionProperties = {\n      beginningSequenceNumber: info.begin_sequence_number,\n      eventHubName: info.name,\n      lastEnqueuedOffset: info.last_enqueued_offset,\n      lastEnqueuedOnUtc: new Date(info.last_enqueued_time_utc),\n      lastEnqueuedSequenceNumber: info.last_enqueued_sequence_number,\n      partitionId: info.partition,\n      isEmpty: info.is_partition_empty\n    };\n    logger.verbose(\"[%s] The partition info is: %O.\", this._context.connectionId, partitionInfo);\n    return partitionInfo;\n  }\n\n  /**\n   * Closes the AMQP management session to the Event Hub for this client,\n   * returning a promise that will be resolved when disconnection is completed.\n   * @ignore\n   * @returns\n   */\n  async close(): Promise<void> {\n    try {\n      if (this._isMgmtRequestResponseLinkOpen()) {\n        const mgmtLink = this._mgmtReqResLink;\n        this._mgmtReqResLink = undefined;\n        clearTimeout(this._tokenRenewalTimer as NodeJS.Timer);\n        await mgmtLink!.close();\n        logger.info(\"Successfully closed the management session.\");\n      }\n    } catch (err) {\n      const msg = `An error occurred while closing the management session: ${err}`;\n      logger.warning(msg);\n      logErrorStackTrace(err);\n      throw new Error(msg);\n    }\n  }\n\n  private async _init(): Promise<void> {\n    try {\n      if (!this._isMgmtRequestResponseLinkOpen()) {\n        await this._negotiateClaim();\n        const rxopt: ReceiverOptions = {\n          source: { address: this.address },\n          name: this.replyTo,\n          target: { address: this.replyTo },\n          onSessionError: (context: EventContext) => {\n            const id = context.connection.options.id;\n            const ehError = translate(context.session!.error!);\n            logger.verbose(\n              \"[%s] An error occurred on the session for request/response links for \" +\n                \"$management: %O\",\n              id,\n              ehError\n            );\n          }\n        };\n        const sropt: SenderOptions = { target: { address: this.address } };\n        logger.verbose(\n          \"[%s] Creating sender/receiver links on a session for $management endpoint with \" +\n            \"srOpts: %o, receiverOpts: %O.\",\n          this._context.connectionId,\n          sropt,\n          rxopt\n        );\n        this._mgmtReqResLink = await RequestResponseLink.create(\n          this._context.connection,\n          sropt,\n          rxopt\n        );\n        this._mgmtReqResLink.sender.on(SenderEvents.senderError, (context: EventContext) => {\n          const id = context.connection.options.id;\n          const ehError = translate(context.sender!.error!);\n          logger.verbose(\"[%s] An error occurred on the $management sender link.. %O\", id, ehError);\n        });\n        this._mgmtReqResLink.receiver.on(ReceiverEvents.receiverError, (context: EventContext) => {\n          const id = context.connection.options.id;\n          const ehError = translate(context.receiver!.error!);\n          logger.verbose(\n            \"[%s] An error occurred on the $management receiver link.. %O\",\n            id,\n            ehError\n          );\n        });\n        logger.verbose(\n          \"[%s] Created sender '%s' and receiver '%s' links for $management endpoint.\",\n          this._context.connectionId,\n          this._mgmtReqResLink.sender.name,\n          this._mgmtReqResLink.receiver.name\n        );\n        await this._ensureTokenRenewal();\n      }\n    } catch (err) {\n      err = translate(err);\n      logger.warning(\n        \"[%s] An error occured while establishing the $management links: %O\",\n        this._context.connectionId,\n        err\n      );\n      logErrorStackTrace(err);\n      throw err;\n    }\n  }\n\n  /**\n   * @private\n   * Helper method to make the management request\n   * @param request The AMQP message to send\n   * @param options The options to use when sending a request over a $management link\n   */\n  private async _makeManagementRequest(\n    request: Message,\n    options: {\n      retryOptions?: RetryOptions;\n      abortSignal?: AbortSignalLike;\n      requestName?: string;\n    } = {}\n  ): Promise<any> {\n    const retryOptions = options.retryOptions || {};\n    try {\n      const abortSignal: AbortSignalLike | undefined = options && options.abortSignal;\n\n      const sendOperationPromise = () =>\n        new Promise<Message>(async (resolve, reject) => {\n          let count = 0;\n\n          const retryTimeoutInMs = getRetryAttemptTimeoutInMs(options.retryOptions);\n          let timeTakenByInit = 0;\n\n          const rejectOnAbort = () => {\n            const requestName = options.requestName;\n            const desc: string =\n              `[${this._context.connectionId}] The request \"${requestName}\" ` +\n              `to has been cancelled by the user.`;\n            // Cancellation is user-intended behavior, so log to info instead of warning.\n            logger.info(desc);\n            const error = new AbortError(\n              `The ${requestName ? requestName + \" \" : \"\"}operation has been cancelled by the user.`\n            );\n\n            reject(error);\n          };\n\n          if (abortSignal) {\n            if (abortSignal.aborted) {\n              return rejectOnAbort();\n            }\n          }\n\n          if (!this._isMgmtRequestResponseLinkOpen()) {\n            logger.verbose(\n              \"[%s] Acquiring lock to get the management req res link.\",\n              this._context.connectionId\n            );\n\n            const initOperationStartTime = Date.now();\n\n            const actionAfterTimeout = () => {\n              const desc: string = `The request with message_id \"${request.message_id}\" timed out. Please try again later.`;\n              const e: Error = {\n                name: \"OperationTimeoutError\",\n                message: desc\n              };\n\n              return reject(translate(e));\n            };\n\n            const waitTimer = setTimeout(actionAfterTimeout, retryTimeoutInMs);\n\n            try {\n              await defaultLock.acquire(this.managementLock, () => {\n                return this._init();\n              });\n            } catch (err) {\n              return reject(translate(err));\n            } finally {\n              clearTimeout(waitTimer);\n            }\n            timeTakenByInit = Date.now() - initOperationStartTime;\n          }\n\n          const remainingOperationTimeoutInMs = retryTimeoutInMs - timeTakenByInit;\n\n          const sendRequestOptions: SendRequestOptions = {\n            abortSignal: options.abortSignal,\n            requestName: options.requestName,\n            timeoutInMs: remainingOperationTimeoutInMs\n          };\n\n          count++;\n          if (count !== 1) {\n            // Generate a new message_id every time after the first attempt\n            request.message_id = generate_uuid();\n          } else if (!request.message_id) {\n            // Set the message_id in the first attempt only if it is not set\n            request.message_id = generate_uuid();\n          }\n\n          try {\n            const result = await this._mgmtReqResLink!.sendRequest(request, sendRequestOptions);\n            resolve(result);\n          } catch (err) {\n            err = translate(err);\n            logger.warning(\n              \"[%s] An error occurred during send on management request-response link with address \" +\n                \"'%s': %O\",\n              this._context.connectionId,\n              this.address,\n              err\n            );\n            logErrorStackTrace(err);\n            reject(err);\n          }\n        });\n\n      const config: RetryConfig<Message> = {\n        operation: sendOperationPromise,\n        connectionId: this._context.connectionId,\n        operationType: RetryOperationType.management,\n        abortSignal: abortSignal,\n        retryOptions: retryOptions\n      };\n      return (await retry<Message>(config)).body;\n    } catch (err) {\n      err = translate(err);\n      logger.warning(\"An error occurred while making the request to $management endpoint: %O\", err);\n      logErrorStackTrace(err);\n      throw err;\n    }\n  }\n\n  private _isMgmtRequestResponseLinkOpen(): boolean {\n    return this._mgmtReqResLink! && this._mgmtReqResLink!.isOpen();\n  }\n}\n"]}