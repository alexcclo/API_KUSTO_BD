{"version":3,"file":"receiveHandler.js","sourceRoot":"","sources":["../../src/receiveHandler.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;;AAGlC,OAAO,EAAE,MAAM,EAAE,kBAAkB,EAAE,MAAM,OAAO,CAAC;AAEnD;;;;;;GAMG;AACH,MAAM,OAAO,cAAc;IAOzB;;;;;OAKG;IACH,YAAY,QAA0B;QACpC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAED;;;OAGG;IACH,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC;IACjE,CAAC;IAED;;;OAGG;IACH,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC;IACnE,CAAC;IAED;;;;OAIG;IACH,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;IAC1D,CAAC;IAED;;;;OAIG;IACG,IAAI;;YACR,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,IAAI;oBACF,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;iBAC9B;gBAAC,OAAO,GAAG,EAAE;oBACZ,MAAM,CAAC,OAAO,CACZ,0EAA0E,EAC1E,IAAI,CAAC,SAAS,CAAC,IAAI,EACnB,IAAI,CAAC,SAAS,CAAC,OAAO,EACtB,GAAG,CACJ,CAAC;oBACF,kBAAkB,CAAC,GAAG,CAAC,CAAC;iBACzB;aACF;QACH,CAAC;KAAA;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { EventHubReceiver } from \"./eventHubReceiver\";\nimport { logger, logErrorStackTrace } from \"./log\";\n\n/**\n * Describes the receive handler object that is returned from the receive() method with handlers.\n * The ReceiveHandler is used to stop receiving more messages.\n * @class ReceiveHandler\n * @ignore\n * @internal\n */\nexport class ReceiveHandler {\n  /**\n   * @property _receiver  The underlying EventHubReceiver.\n   * @private\n   */\n  private _receiver: EventHubReceiver;\n\n  /**\n   * Creates an instance of the ReceiveHandler.\n   * @constructor\n   * @internal\n   * @param receiver The underlying EventHubReceiver.\n   */\n  constructor(receiver: EventHubReceiver) {\n    this._receiver = receiver;\n  }\n\n  /**\n   * @property The partitionId from which the handler is receiving events.\n   * @readonly\n   */\n  get partitionId(): string | undefined {\n    return this._receiver ? this._receiver.partitionId : undefined;\n  }\n\n  /**\n   * @property The consumer group from which the handler is receiving events.\n   * @readonly\n   */\n  get consumerGroup(): string | undefined {\n    return this._receiver ? this._receiver.consumerGroup : undefined;\n  }\n\n  /**\n   * @property Indicates whether the receiver is connected/open.\n   * `true` - is open; `false` otherwise.\n   * @readonly\n   */\n  get isReceiverOpen(): boolean {\n    return this._receiver ? this._receiver.isOpen() : false;\n  }\n\n  /**\n   * Stops the underlying EventHubReceiver from receiving more messages.\n   * @returns Promise<void>\n   * @throws Error if the underlying connection encounters an error while closing.\n   */\n  async stop(): Promise<void> {\n    if (this._receiver) {\n      try {\n        await this._receiver.close();\n      } catch (err) {\n        logger.warning(\n          \"An error occurred while stopping the receiver '%s' with address '%s': %O\",\n          this._receiver.name,\n          this._receiver.address,\n          err\n        );\n        logErrorStackTrace(err);\n      }\n    }\n  }\n}\n"]}