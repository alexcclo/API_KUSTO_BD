{"version":3,"file":"partitionPump.js","sourceRoot":"","sources":["../../src/partitionPump.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { logger, logErrorStackTrace } from \"./log\";\nimport { CommonEventProcessorOptions } from \"./models/private\";\nimport { CloseReason } from \"./models/public\";\nimport { EventHubClient } from \"./impl/eventHubClient\";\nimport { EventPosition } from \"./eventPosition\";\nimport { PartitionProcessor } from \"./partitionProcessor\";\nimport { EventHubConsumer } from \"./receiver\";\nimport { AbortController } from \"@azure/abort-controller\";\nimport { MessagingError } from \"@azure/core-amqp\";\nimport { getParentSpan, TracingOptions } from \"./util/operationOptions\";\nimport { getTracer } from \"@azure/core-tracing\";\nimport { Span, SpanKind, Link, CanonicalCode } from \"@opentelemetry/types\";\nimport { extractSpanContextFromEventData } from \"./diagnostics/instrumentEventData\";\nimport { ReceivedEventData } from \"./eventData\";\n\n/**\n * @ignore\n * @internal\n */\nexport class PartitionPump {\n  private _eventHubClient: EventHubClient;\n  private _partitionProcessor: PartitionProcessor;\n  private _processorOptions: CommonEventProcessorOptions;\n  private _receiver: EventHubConsumer | undefined;\n  private _isReceiving: boolean = false;\n  private _isStopped: boolean = false;\n  private _abortController: AbortController;\n\n  constructor(\n    eventHubClient: EventHubClient,\n    partitionProcessor: PartitionProcessor,\n    private readonly _startPosition: EventPosition,\n    options: CommonEventProcessorOptions\n  ) {\n    this._eventHubClient = eventHubClient;\n    this._partitionProcessor = partitionProcessor;\n    this._processorOptions = options;\n    this._abortController = new AbortController();\n  }\n\n  public get isReceiving(): boolean {\n    return this._isReceiving;\n  }\n\n  async start(): Promise<void> {\n    this._isReceiving = true;\n    try {\n      await this._partitionProcessor.initialize();\n    } catch (err) {\n      // swallow the error from the user-defined code\n      this._partitionProcessor.processError(err);\n    }\n\n    // this is intentionally not await'd - the _receiveEvents loop will continue to\n    // execute and can be stopped by calling .stop()\n    this._receiveEvents(this._partitionProcessor.partitionId);\n    logger.info(\n      `Successfully started the receiver for partition \"${this._partitionProcessor.partitionId}\".`\n    );\n  }\n\n  private async _receiveEvents(partitionId: string): Promise<void> {\n    this._receiver = this._eventHubClient.createConsumer(\n      this._partitionProcessor.consumerGroup,\n      partitionId,\n      this._startPosition,\n      {\n        ownerLevel: this._processorOptions.ownerLevel,\n        trackLastEnqueuedEventProperties: this._processorOptions.trackLastEnqueuedEventProperties\n      }\n    );\n\n    while (this._isReceiving) {\n      try {\n        const receivedEvents = await this._receiver.receiveBatch(\n          this._processorOptions.maxBatchSize,\n          this._processorOptions.maxWaitTimeInSeconds,\n          this._abortController.signal\n        );\n\n        if (\n          this._processorOptions.trackLastEnqueuedEventProperties &&\n          this._receiver.lastEnqueuedEventProperties\n        ) {\n          this._partitionProcessor.lastEnqueuedEventProperties = this._receiver.lastEnqueuedEventProperties;\n        }\n        // avoid calling user's processEvents handler if the pump was stopped while receiving events\n        if (!this._isReceiving) {\n          return;\n        }\n\n        const span = createProcessingSpan(\n          receivedEvents,\n          this._eventHubClient,\n          this._processorOptions\n        );\n\n        await trace(() => this._partitionProcessor.processEvents(receivedEvents), span);\n      } catch (err) {\n        // check if this pump is still receiving\n        // it may not be if the EventProcessor was stopped during processEvents\n        if (!this._isReceiving) {\n          // no longer receiving, so close was called from somewhere else\n          return;\n        }\n\n        logger.warning(\n          `An error was thrown while receiving or processing events on partition \"${this._partitionProcessor.partitionId}\"`\n        );\n        logErrorStackTrace(err);\n        // forward error to user's processError and swallow errors they may throw\n        try {\n          await this._partitionProcessor.processError(err);\n        } catch (err) {\n          // Using verbose over warning because this error is swallowed.\n          logger.verbose(\"An error was thrown by user's processError method: \", err);\n        }\n\n        // close the partition processor if a non-retryable error was encountered\n        if (typeof err !== \"object\" || !(err as MessagingError).retryable) {\n          try {\n            // If the exception indicates that the partition was stolen (i.e some other consumer with same ownerlevel\n            // started consuming the partition), update the closeReason\n            if (err.code === \"ReceiverDisconnectedError\") {\n              return await this.stop(CloseReason.OwnershipLost);\n            }\n            // this will close the pump and will break us out of the while loop\n            return await this.stop(CloseReason.Shutdown);\n          } catch (err) {\n            // Using verbose over warning because this error is swallowed.\n            logger.verbose(\n              `An error occurred while closing the receiver with reason ${CloseReason.Shutdown}: `,\n              err\n            );\n          }\n        }\n      }\n    }\n  }\n\n  async stop(reason: CloseReason): Promise<void> {\n    if (this._isStopped) {\n      return;\n    }\n    this._isStopped = true;\n    this._isReceiving = false;\n    try {\n      if (this._receiver) {\n        await this._receiver.close();\n      }\n      this._abortController.abort();\n      await this._partitionProcessor.close(reason);\n    } catch (err) {\n      logger.warning(\"An error occurred while closing the receiver.\", err);\n      logErrorStackTrace(err);\n      this._partitionProcessor.processError(err);\n      throw err;\n    }\n  }\n}\n\n/**\n * @internal\n * @ignore\n */\nexport function createProcessingSpan(\n  receivedEvents: ReceivedEventData[],\n  eventHubProperties: { eventHubName: string; endpoint: string },\n  tracingOptions: TracingOptions\n): Span {\n  const links: Link[] = [];\n\n  for (const receivedEvent of receivedEvents) {\n    const spanContext = extractSpanContextFromEventData(receivedEvent);\n\n    if (spanContext == null) {\n      continue;\n    }\n\n    links.push({\n      spanContext\n    });\n  }\n\n  const span = getTracer().startSpan(\"Azure.EventHubs.process\", {\n    kind: SpanKind.CONSUMER,\n    links,\n    parent: getParentSpan(tracingOptions)\n  });\n\n  span.setAttributes({\n    \"az.namespace\": \"Microsoft.EventHub\",\n    \"message_bus.destination\": eventHubProperties.eventHubName,\n    \"peer.address\": eventHubProperties.endpoint\n  });\n\n  return span;\n}\n\n/**\n * @ignore\n * @internal\n */\nexport async function trace(fn: () => Promise<void>, span: Span): Promise<void> {\n  try {\n    await fn();\n    span.setStatus({ code: CanonicalCode.OK });\n  } catch (err) {\n    span.setStatus({\n      code: CanonicalCode.UNKNOWN,\n      message: err.message\n    });\n    throw err;\n  } finally {\n    span.end();\n  }\n}\n"]}