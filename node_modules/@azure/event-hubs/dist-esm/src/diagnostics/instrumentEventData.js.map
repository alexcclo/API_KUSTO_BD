{"version":3,"file":"instrumentEventData.js","sourceRoot":"","sources":["../../../src/diagnostics/instrumentEventData.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAElC,OAAO,EAAE,oBAAoB,EAAE,uCAAuC,EAAE,MAAM,qBAAqB,CAAC;AAIpG;;GAEG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,eAAe,CAAC;AAEpD;;;;;;;;GAQG;AACH,MAAM,UAAU,mBAAmB,CAAC,SAAoB,EAAE,IAAU;IAClE,IAAI,SAAS,CAAC,UAAU,IAAI,SAAS,CAAC,UAAU,CAAC,oBAAoB,CAAC,EAAE;QACtE,OAAO,SAAS,CAAC;KAClB;IAED,+CAA+C;IAC/C,SAAS,mCAAQ,SAAS,KAAE,UAAU,oBAAO,SAAS,CAAC,UAAU,IAAI,CAAC;IAEtE,MAAM,WAAW,GAAG,oBAAoB,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACzD,IAAI,WAAW,EAAE;QACf,SAAS,CAAC,UAAW,CAAC,oBAAoB,CAAC,GAAG,WAAW,CAAC;KAC3D;IAED,OAAO,SAAS,CAAC;AACnB,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,+BAA+B,CAAC,SAAoB;IAClE,IAAI,CAAC,SAAS,CAAC,UAAU,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,oBAAoB,CAAC,EAAE;QACxE,OAAO;KACR;IAED,MAAM,YAAY,GAAG,SAAS,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC;IAChE,OAAO,uCAAuC,CAAC,YAAY,CAAC,CAAC;AAC/D,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { getTraceParentHeader, extractSpanContextFromTraceParentHeader } from \"@azure/core-tracing\";\nimport { Span, SpanContext } from \"@opentelemetry/types\";\nimport { EventData } from \"../eventData\";\n\n/**\n * @ignore\n */\nexport const TRACEPARENT_PROPERTY = \"Diagnostic-Id\";\n\n/**\n * Populates the `EventData` with `SpanContext` info to support trace propagation.\n * Creates and returns a copy of the passed in `EventData` unless the `EventData`\n * has already been instrumented.\n * @param eventData The `EventData` to instrument.\n * @param span The `Span` containing the context to propagate tracing information.\n * @ignore\n * @internal\n */\nexport function instrumentEventData(eventData: EventData, span: Span): EventData {\n  if (eventData.properties && eventData.properties[TRACEPARENT_PROPERTY]) {\n    return eventData;\n  }\n\n  // create a copy so the original isn't modified\n  eventData = { ...eventData, properties: { ...eventData.properties } };\n\n  const traceParent = getTraceParentHeader(span.context());\n  if (traceParent) {\n    eventData.properties![TRACEPARENT_PROPERTY] = traceParent;\n  }\n\n  return eventData;\n}\n\n/**\n * Extracts the `SpanContext` from an `EventData` if the context exists.\n * @param eventData An individual `EventData` object.\n * @internal\n * @ignore\n */\nexport function extractSpanContextFromEventData(eventData: EventData): SpanContext | undefined {\n  if (!eventData.properties || !eventData.properties[TRACEPARENT_PROPERTY]) {\n    return;\n  }\n\n  const diagnosticId = eventData.properties[TRACEPARENT_PROPERTY];\n  return extractSpanContextFromTraceParentHeader(diagnosticId);\n}\n"]}