{"version":3,"file":"eventProcessor.js","sourceRoot":"","sources":["../../src/eventProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport uuid from \"uuid/v4\";\nimport { EventHubClient } from \"./impl/eventHubClient\";\nimport { PumpManager, PumpManagerImpl } from \"./pumpManager\";\nimport { AbortController, AbortSignalLike } from \"@azure/abort-controller\";\nimport { logger, logErrorStackTrace } from \"./log\";\nimport { FairPartitionLoadBalancer, PartitionLoadBalancer } from \"./partitionLoadBalancer\";\nimport { PartitionProcessor, Checkpoint } from \"./partitionProcessor\";\nimport { SubscriptionEventHandlers } from \"./eventHubConsumerClientModels\";\nimport { EventPosition, latestEventPosition, isEventPosition } from \"./eventPosition\";\nimport { delayWithoutThrow } from \"./util/delayWithoutThrow\";\nimport { CommonEventProcessorOptions } from \"./models/private\";\nimport { CloseReason } from \"./models/public\";\n\n/**\n * An interface representing the details on which instance of a `EventProcessor` owns processing\n * of a given partition from a consumer group of an Event Hub instance.\n *\n * **Note**: This is used internally by the `EventProcessor` and user never has to create it directly.\n */\nexport interface PartitionOwnership {\n  /**\n   * @property The fully qualified Event Hubs namespace. This is likely to be similar to\n   * <yournamespace>.servicebus.windows.net\n   */\n  fullyQualifiedNamespace: string;\n  /**\n   * @property The event hub name\n   */\n  eventHubName: string;\n  /**\n   * @property The consumer group name\n   */\n  consumerGroup: string;\n  /**\n   * @property The identifier of the Event Hub partition.\n   */\n  partitionId: string;\n  /**\n   * @property The unique identifier of the event processor.\n   */\n  ownerId: string;\n  /**\n   * @property The last modified time.\n   */\n  lastModifiedTimeInMs?: number;\n  /**\n   * @property The unique identifier for the operation.\n   */\n  etag?: string;\n}\n\n/**\n * A checkpoint store stores and retrieves partition ownership information and checkpoint details\n * for each partition in a given consumer group of an event hub instance.\n *\n * Users are not meant to implement an `CheckpointStore`.\n * Users are expected to choose existing implementations of this interface, instantiate it, and pass\n * it to the `EventHubConsumerClient` class constructor when instantiating a client.\n * Users are not expected to use any of the methods on a checkpoint store, these are used internally by\n * the client.\n *\n * Implementations of `CheckpointStore` can be found on npm by searching for packages with the prefix &commat;azure/eventhub-checkpointstore-.\n */\nexport interface CheckpointStore {\n  /**\n   * Called to get the list of all existing partition ownership from the underlying data store. Could return empty\n   * results if there are is no existing ownership information.\n   *\n   * @param fullyQualifiedNamespace The fully qualified Event Hubs namespace. This is likely to be similar to\n   * <yournamespace>.servicebus.windows.net.\n   * @param eventHubName The event hub name.\n   * @param consumerGroup The consumer group name.\n   * @return A list of partition ownership details of all the partitions that have/had an owner.\n   */\n  listOwnership(\n    fullyQualifiedNamespace: string,\n    eventHubName: string,\n    consumerGroup: string\n  ): Promise<PartitionOwnership[]>;\n  /**\n   * Called to claim ownership of a list of partitions. This will return the list of partitions that were owned\n   * successfully.\n   *\n   * @param partitionOwnership The list of partition ownership this instance is claiming to own.\n   * @return A list of partitions this instance successfully claimed ownership.\n   */\n  claimOwnership(partitionOwnership: PartitionOwnership[]): Promise<PartitionOwnership[]>;\n\n  /**\n   * Updates the checkpoint in the data store for a partition.\n   *\n   * @param checkpoint The checkpoint.\n   */\n  updateCheckpoint(checkpoint: Checkpoint): Promise<void>;\n\n  /**\n   * Lists all the checkpoints in a data store for a given namespace, eventhub and consumer group.\n   *\n   * @param fullyQualifiedNamespace The fully qualified Event Hubs namespace. This is likely to be similar to\n   * <yournamespace>.servicebus.windows.net.\n   * @param eventHubName The event hub name.\n   * @param consumerGroup The consumer group name.\n   */\n  listCheckpoints(\n    fullyQualifiedNamespace: string,\n    eventHubName: string,\n    consumerGroup: string\n  ): Promise<Checkpoint[]>;\n}\n\n/**\n * A set of options to pass to the constructor of `EventProcessor`.\n * You can specify\n * - `maxBatchSize`: The max size of the batch of events passed each time to user code for processing.\n * - `maxWaitTimeInSeconds`: The maximum amount of time to wait to build up the requested message count before\n * passing the data to user code for processing. If not provided, it defaults to 60 seconds.\n *\n * Example usage with default values:\n * ```ts\n * {\n *     maxBatchSize: 1,\n *     maxWaitTimeInSeconds: 60,\n * }\n * ```\n * @internal\n * @ignore\n */\nexport interface FullEventProcessorOptions extends CommonEventProcessorOptions {\n  /**\n   * An optional pump manager to use, rather than instantiating one internally\n   * @internal\n   * @ignore\n   */\n  pumpManager?: PumpManager;\n}\n\n/**\n * Event Processor based applications consist of one or more instances of EventProcessor which have been\n * configured to consume events from the same Event Hub and consumer group. They balance the\n * workload across different instances by distributing the partitions to be processed among themselves.\n * They also allow the user to track progress when events are processed using checkpoints.\n *\n * A checkpoint is meant to represent the last successfully processed event by the user from a particular\n * partition of a consumer group in an Event Hub instance.\n *\n * You need the below to create an instance of `EventProcessor`\n * - The name of the consumer group from which you want to process events\n * - An instance of `EventHubClient` class that was created for the Event Hub instance.\n * - A user implemented class that extends the `PartitionProcessor` class. To get started, you can use the\n * base class `PartitionProcessor` which simply logs the incoming events. To provide your code to process incoming\n * events, extend this class and override the `processEvents()` method. For example:\n * ```js\n * class SamplePartitionProcessor extends PartitionProcessor {\n *     async processEvents(events) {\n *        // user code to process events here\n *        // Information on the partition being processed is available as properties on the `SamplePartitionProcessor` class\n *        // use `this.updateCheckpoint()` method to update checkpoints as needed\n *     }\n * }\n * ```\n * - An instance of `CheckpointStore`. See &commat;azure/eventhubs-checkpointstore-blob for an implementation.\n * For production, choose an implementation that will store checkpoints and partition ownership details to a durable store.\n * Implementations of `CheckpointStore` can be found on npm by searching for packages with the prefix &commat;azure/eventhub-checkpointstore-.\n *\n * @class EventProcessor\n * @internal\n * @ignore\n */\nexport class EventProcessor {\n  private _consumerGroup: string;\n  private _processorOptions: FullEventProcessorOptions;\n  private _pumpManager: PumpManager;\n  private _id: string;\n  private _isRunning: boolean = false;\n  private _loopTask?: PromiseLike<void>;\n  private _abortController?: AbortController;\n  private _processingTarget: PartitionLoadBalancer | string;\n  private _loopIntervalInMs = 10000;\n  private _inactiveTimeLimitInMs = 60000;\n\n  /**\n   * @param consumerGroup The name of the consumer group from which you want to process events.\n   * @param eventHubClient An instance of `EventHubClient` that was created for the Event Hub instance.\n   * @param PartitionProcessorClass A user-provided class that extends the `PartitionProcessor` class.\n   * This class will be responsible for processing and checkpointing events.\n   * @param checkpointStore An instance of `CheckpointStore`. See &commat;azure/eventhubs-checkpointstore-blob for an implementation.\n   * For production, choose an implementation that will store checkpoints and partition ownership details to a durable store.\n   * @param options A set of options to configure the Event Processor\n   * - `maxBatchSize`         : The max size of the batch of events passed each time to user code for processing.\n   * - `maxWaitTimeInSeconds` : The maximum amount of time to wait to build up the requested message count before\n   * passing the data to user code for processing. If not provided, it defaults to 60 seconds.\n   */\n  constructor(\n    consumerGroup: string,\n    private _eventHubClient: EventHubClient,\n    private _subscriptionEventHandlers: SubscriptionEventHandlers,\n    private _checkpointStore: CheckpointStore,\n    options: FullEventProcessorOptions\n  ) {\n    if (options.ownerId) {\n      this._id = options.ownerId;\n      logger.verbose(`Starting event processor with ID ${this._id}`);\n    } else {\n      this._id = uuid();\n      logger.verbose(`Starting event processor with autogenerated ID ${this._id}`);\n    }\n\n    this._consumerGroup = consumerGroup;\n    this._processorOptions = options;\n    this._pumpManager =\n      options.pumpManager || new PumpManagerImpl(this._id, this._processorOptions);\n    const inactiveTimeLimitInMS = options.inactiveTimeLimitInMs || this._inactiveTimeLimitInMs;\n    this._processingTarget =\n      options.processingTarget || new FairPartitionLoadBalancer(inactiveTimeLimitInMS);\n    if (options.loopIntervalInMs) {\n      this._loopIntervalInMs = options.loopIntervalInMs;\n    }\n  }\n\n  /**\n   * The unique identifier for the EventProcessor.\n   *\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  private _createPartitionOwnershipRequest(\n    partitionOwnershipMap: Map<string, PartitionOwnership>,\n    partitionIdToClaim: string\n  ): PartitionOwnership {\n    const previousPartitionOwnership = partitionOwnershipMap.get(partitionIdToClaim);\n    const partitionOwnership: PartitionOwnership = {\n      ownerId: this._id,\n      partitionId: partitionIdToClaim,\n      fullyQualifiedNamespace: this._eventHubClient.fullyQualifiedNamespace,\n      consumerGroup: this._consumerGroup,\n      eventHubName: this._eventHubClient.eventHubName,\n      etag: previousPartitionOwnership ? previousPartitionOwnership.etag : undefined\n    };\n\n    return partitionOwnership;\n  }\n\n  /*\n   * Claim ownership of the given partition if it's available\n   */\n  private async _claimOwnership(\n    ownershipRequest: PartitionOwnership,\n    abortSignal: AbortSignalLike\n  ): Promise<void> {\n    if (abortSignal.aborted) {\n      logger.verbose(\n        `[${this._id}] Subscription was closed before claiming ownership of ${ownershipRequest.partitionId}.`\n      );\n      return;\n    }\n    logger.info(\n      `[${this._id}] Attempting to claim ownership of partition ${ownershipRequest.partitionId}.`\n    );\n    try {\n      const claimedOwnerships = await this._checkpointStore.claimOwnership([ownershipRequest]);\n\n      // can happen if the partition was claimed out from underneath us - we shouldn't\n      // attempt to spin up a processor.\n      if (!claimedOwnerships.length) {\n        return;\n      }\n\n      logger.info(\n        `[${this._id}] Successfully claimed ownership of partition ${ownershipRequest.partitionId}.`\n      );\n\n      await this._startPump(ownershipRequest.partitionId, abortSignal);\n    } catch (err) {\n      logger.warning(\n        `[${this.id}] Failed to claim ownership of partition ${ownershipRequest.partitionId}`\n      );\n      logErrorStackTrace(err);\n      await this._handleSubscriptionError(err);\n    }\n  }\n\n  private async _startPump(partitionId: string, abortSignal: AbortSignalLike) {\n    if (abortSignal.aborted) {\n      logger.verbose(\n        `[${this._id}] The subscription was closed before starting to read from ${partitionId}.`\n      );\n      return;\n    }\n\n    if (this._pumpManager.isReceivingFromPartition(partitionId)) {\n      logger.verbose(\n        `[${this._id}] There is already an active partitionPump for partition \"${partitionId}\", skipping pump creation.`\n      );\n      return;\n    }\n\n    logger.verbose(\n      `[${this._id}] [${partitionId}] Calling user-provided PartitionProcessorFactory.`\n    );\n\n    const partitionProcessor = new PartitionProcessor(\n      this._subscriptionEventHandlers,\n      this._checkpointStore,\n      {\n        fullyQualifiedNamespace: this._eventHubClient.fullyQualifiedNamespace,\n        eventHubName: this._eventHubClient.eventHubName,\n        consumerGroup: this._consumerGroup,\n        partitionId: partitionId,\n        eventProcessorId: this.id\n      }\n    );\n\n    const eventPosition = await this._getStartingPosition(partitionId);\n    await this._pumpManager.createPump(\n      eventPosition,\n      this._eventHubClient,\n      partitionProcessor,\n      abortSignal\n    );\n\n    logger.verbose(`[${this._id}] PartitionPump created successfully.`);\n  }\n\n  private async _getStartingPosition(partitionIdToClaim: string): Promise<EventPosition> {\n    const availableCheckpoints = await this._checkpointStore.listCheckpoints(\n      this._eventHubClient.fullyQualifiedNamespace,\n      this._eventHubClient.eventHubName,\n      this._consumerGroup\n    );\n\n    const validCheckpoints = availableCheckpoints.filter(\n      (chk) => chk.partitionId === partitionIdToClaim\n    );\n\n    if (validCheckpoints.length > 0) {\n      return { offset: validCheckpoints[0].offset };\n    }\n\n    logger.verbose(\n      `No checkpoint found for partition ${partitionIdToClaim}. Looking for fallback.`\n    );\n    return getStartPosition(partitionIdToClaim, this._processorOptions.startPosition);\n  }\n\n  private async _runLoopForSinglePartition(\n    partitionId: string,\n    abortSignal: AbortSignalLike\n  ): Promise<void> {\n    while (!abortSignal.aborted) {\n      try {\n        await this._startPump(partitionId, abortSignal);\n      } catch (err) {\n        logger.warning(`[${this._id}] An error occured within the EventProcessor loop: ${err}`);\n        logErrorStackTrace(err);\n        await this._handleSubscriptionError(err);\n      } finally {\n        // sleep for some time after which we can attempt to create a pump again.\n        logger.verbose(\n          `[${this._id}] Pausing the EventProcessor loop for ${this._loopIntervalInMs} ms.`\n        );\n        // swallow errors from delay since it's fine for delay to exit early\n        await delayWithoutThrow(this._loopIntervalInMs, abortSignal);\n      }\n    }\n    this._isRunning = false;\n  }\n\n  /**\n   * Every loop to this method will result in this EventProcessor owning at most one new partition.\n   *\n   * The load is considered balanced when no active EventProcessor owns 2 partitions more than any other active\n   * EventProcessor. Given that each invocation to this method results in ownership claim of at most one partition,\n   * this algorithm converges gradually towards a steady state.\n   *\n   * When a new partition is claimed, this method is also responsible for starting a partition pump that creates an\n   * EventHubConsumer for processing events from that partition.\n   */\n\n  private async _runLoopWithLoadBalancing(\n    loadBalancer: PartitionLoadBalancer,\n    abortSignal: AbortSignalLike\n  ): Promise<void> {\n    // periodically check if there is any partition not being processed and process it\n    while (!abortSignal.aborted) {\n      try {\n        const partitionOwnershipMap: Map<string, PartitionOwnership> = new Map();\n        // Retrieve current partition ownership details from the datastore.\n        const partitionOwnership = await this._checkpointStore.listOwnership(\n          this._eventHubClient.fullyQualifiedNamespace,\n          this._eventHubClient.eventHubName,\n          this._consumerGroup\n        );\n\n        const abandonedMap: Map<string, PartitionOwnership> = new Map();\n\n        for (const ownership of partitionOwnership) {\n          if (isAbandoned(ownership)) {\n            abandonedMap.set(ownership.partitionId, ownership);\n            continue;\n          }\n\n          partitionOwnershipMap.set(ownership.partitionId, ownership);\n        }\n        const partitionIds = await this._eventHubClient.getPartitionIds({\n          abortSignal: abortSignal\n        });\n\n        if (abortSignal.aborted) {\n          return;\n        }\n\n        if (partitionIds.length > 0) {\n          const partitionsToClaim = loadBalancer.loadBalance(\n            this._id,\n            partitionOwnershipMap,\n            partitionIds\n          );\n          if (partitionsToClaim) {\n            for (const partitionToClaim of partitionsToClaim) {\n              let ownershipRequest: PartitionOwnership;\n\n              if (abandonedMap.has(partitionToClaim)) {\n                ownershipRequest = this._createPartitionOwnershipRequest(\n                  abandonedMap,\n                  partitionToClaim\n                );\n              } else {\n                ownershipRequest = this._createPartitionOwnershipRequest(\n                  partitionOwnershipMap,\n                  partitionToClaim\n                );\n              }\n\n              await this._claimOwnership(ownershipRequest, abortSignal);\n            }\n          }\n        }\n      } catch (err) {\n        logger.warning(`[${this._id}] An error occured within the EventProcessor loop: ${err}`);\n        logErrorStackTrace(err);\n        await this._handleSubscriptionError(err);\n      } finally {\n        // sleep for some time, then continue the loop again.\n        logger.verbose(\n          `[${this._id}] Pausing the EventProcessor loop for ${this._loopIntervalInMs} ms.`\n        );\n        // swallow the error since it's fine to exit early from delay\n        await delayWithoutThrow(this._loopIntervalInMs, abortSignal);\n      }\n    }\n    this._isRunning = false;\n  }\n\n  /**\n   * This is called when there are errors that are not specific to a partition (ex: load balancing)\n   */\n  private async _handleSubscriptionError(err: Error): Promise<void> {\n    // filter out any internal \"expected\" errors\n    if (err.name === \"AbortError\") {\n      return;\n    }\n\n    if (this._subscriptionEventHandlers.processError) {\n      try {\n        await this._subscriptionEventHandlers.processError(err, {\n          fullyQualifiedNamespace: this._eventHubClient.fullyQualifiedNamespace,\n          eventHubName: this._eventHubClient.eventHubName,\n          consumerGroup: this._consumerGroup,\n          partitionId: \"\",\n          updateCheckpoint: async () => {}\n        });\n      } catch (err) {\n        logger.verbose(\n          `[${this._id}] An error was thrown from the user's processError handler: ${err}`\n        );\n      }\n    }\n  }\n\n  /**\n   * Starts the `EventProcessor`. Based on the number of instances of `EventProcessor` that are running for the\n   * same consumer group, the partitions are distributed among these instances to process events.\n   *\n   * For each partition, the user provided `PartitionProcessor` is instantiated.\n   *\n   * Subsequent calls to start will be ignored if this event processor is already running.\n   * Calling `start()` after `stop()` is called will restart this event processor.\n   *\n   * @return {void}\n   */\n  start(): void {\n    if (this._isRunning) {\n      logger.verbose(`[${this._id}] Attempted to start an already running EventProcessor.`);\n      return;\n    }\n\n    this._isRunning = true;\n    this._abortController = new AbortController();\n    logger.verbose(`[${this._id}] Starting an EventProcessor.`);\n\n    if (targetWithoutOwnership(this._processingTarget)) {\n      logger.verbose(`[${this._id}] Single partition target: ${this._processingTarget}`);\n      this._loopTask = this._runLoopForSinglePartition(\n        this._processingTarget,\n        this._abortController.signal\n      );\n    } else {\n      logger.verbose(`[${this._id}] Multiple partitions, using load balancer`);\n      this._loopTask = this._runLoopWithLoadBalancing(\n        this._processingTarget,\n        this._abortController.signal\n      );\n    }\n  }\n\n  isRunning() {\n    return this._isRunning;\n  }\n\n  /**\n   * Stops processing events for all partitions owned by this event processor.\n   * All `PartitionProcessor` will be shutdown and any open resources will be closed.\n   *\n   * Subsequent calls to stop will be ignored if the event processor is not running.\n   *\n   */\n  async stop(): Promise<void> {\n    logger.verbose(`[${this._id}] Stopping an EventProcessor.`);\n    if (this._abortController) {\n      // cancel the event processor loop\n      this._abortController.abort();\n    }\n\n    try {\n      // remove all existing pumps\n      await this._pumpManager.removeAllPumps(CloseReason.Shutdown);\n\n      // waits for the event processor loop to complete\n      // will complete immediately if _loopTask is undefined\n      if (this._loopTask) {\n        await this._loopTask;\n      }\n    } catch (err) {\n      logger.verbose(`[${this._id}] An error occured while stopping the EventProcessor: ${err}`);\n    } finally {\n      logger.verbose(`[${this._id}] EventProcessor stopped.`);\n    }\n\n    if (targetWithoutOwnership(this._processingTarget)) {\n      logger.verbose(`[${this._id}] No partitions owned, skipping abandoning.`);\n    } else {\n      await this.abandonPartitionOwnerships();\n    }\n  }\n\n  private async abandonPartitionOwnerships() {\n    logger.verbose(`[${this._id}] Abandoning owned partitions`);\n    const allOwnerships = await this._checkpointStore.listOwnership(\n      this._eventHubClient.fullyQualifiedNamespace,\n      this._eventHubClient.eventHubName,\n      this._consumerGroup\n    );\n    const ourOwnerships = allOwnerships.filter((ownership) => ownership.ownerId === this._id);\n    // unclaim any partitions that we currently own\n    for (const ownership of ourOwnerships) {\n      ownership.ownerId = \"\";\n    }\n    return this._checkpointStore.claimOwnership(ourOwnerships);\n  }\n}\n\nfunction isAbandoned(ownership: PartitionOwnership): boolean {\n  return ownership.ownerId === \"\";\n}\n\nfunction getStartPosition(\n  partitionIdToClaim: string,\n  startPositions?: EventPosition | { [partitionId: string]: EventPosition }\n): EventPosition {\n  if (startPositions == null) {\n    return latestEventPosition;\n  }\n\n  if (isEventPosition(startPositions)) {\n    return startPositions;\n  }\n\n  const startPosition = (startPositions as { [partitionId: string]: EventPosition })[\n    partitionIdToClaim\n  ];\n\n  if (startPosition == null) {\n    return latestEventPosition;\n  }\n\n  return startPosition;\n}\n\nfunction targetWithoutOwnership(target: PartitionLoadBalancer | string): target is string {\n  return typeof target === \"string\";\n}\n"]}