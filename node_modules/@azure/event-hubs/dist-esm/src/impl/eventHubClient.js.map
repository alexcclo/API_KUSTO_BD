{"version":3,"file":"eventHubClient.js","sourceRoot":"","sources":["../../../src/impl/eventHubClient.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;;AAElC,OAAO,EAAE,MAAM,EAAE,kBAAkB,EAAE,MAAM,QAAQ,CAAC;AACpD,OAAO,EAEL,wBAAwB,EACxB,mBAAmB,EACnB,gBAAgB,EAChB,iBAAiB,EAEjB,SAAS,EACT,qBAAqB,EAEtB,MAAM,kBAAkB,CAAC;AAE1B,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AAGzD,OAAO,EAAE,gBAAgB,EAAE,MAAM,WAAW,CAAC;AAC7C,OAAO,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAC;AAC/C,OAAO,EAAE,gCAAgC,EAAE,4BAA4B,EAAE,MAAM,eAAe,CAAC;AAC/F,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAChD,OAAO,EAAqB,QAAQ,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AAClF,OAAO,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAC;AA2DzD;;;;;;;;;;;;;;;GAeG;AACH,MAAM,OAAO,cAAc;IA6CzB,YACE,sBAA8B,EAC9B,qBAAsD,EACtD,mBAA6D,EAC7D,OAA+B;QAE/B,IAAI,gBAAgB,CAAC;QACrB,IAAI,MAAM,CAAC;QACX,IAAI,UAAiD,CAAC;QACtD,sBAAsB,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC;QAExD,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,EAAE;YAC3C,MAAM,QAAQ,GAAG,qBAAqB,CAAgC,sBAAsB,CAAC,CAAC;YAC9F,IACE,CAAC,CACC,QAAQ,CAAC,UAAU;gBACnB,CAAC,OAAO,qBAAqB,KAAK,QAAQ,IAAI,qBAAqB,CAAC,CACrE,EACD;gBACA,MAAM,IAAI,SAAS,CACjB,6DAA6D,sBAAsB,KAAK;oBACtF,kDAAkD,CACrD,CAAC;aACH;YACD,IACE,QAAQ,CAAC,UAAU;gBACnB,OAAO,qBAAqB,KAAK,QAAQ;gBACzC,qBAAqB;gBACrB,QAAQ,CAAC,UAAU,KAAK,qBAAqB,EAC7C;gBACA,MAAM,IAAI,SAAS,CACjB,oBAAoB,QAAQ,CAAC,UAAU,2BAA2B,sBAAsB,IAAI;oBAC1F,qCAAqC,qBAAqB,IAAI,CACjE,CAAC;aACH;YACD,gBAAgB,GAAG,sBAAsB,CAAC;YAC1C,IAAI,OAAO,qBAAqB,KAAK,QAAQ,EAAE;gBAC7C,6DAA6D;gBAC7D,MAAM,GAAG,wBAAwB,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;gBAC3D,OAAO,GAAG,qBAAqB,CAAC;aACjC;iBAAM;gBACL,2EAA2E;gBAC3E,MAAM,YAAY,GAAG,qBAAqB,CAAC;gBAC3C,MAAM,GAAG,wBAAwB,CAAC,MAAM,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;gBACzE,OAAO,GAAG,mBAAmB,CAAC;aAC/B;YACD,kEAAkE;YAClE,UAAU,GAAG,IAAI,mBAAmB,CAAC,MAAM,CAAC,mBAAmB,EAAE,MAAM,CAAC,eAAe,CAAC,CAAC;SAC1F;aAAM;YACL,kFAAkF;YAClF,MAAM,YAAY,GAAG,qBAAqB,CAAC;YAC3C,IAAI,IAAI,GAAG,sBAAsB,CAAC;YAClC,UAAU,GAAG,mBAAmB,CAAC;YACjC,IAAI,CAAC,YAAY,EAAE;gBACjB,MAAM,IAAI,SAAS,CAAC,2BAA2B,CAAC,CAAC;aAClD;YAED,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;gBAAE,IAAI,IAAI,GAAG,CAAC;YACrC,gBAAgB,GAAG,iBAAiB,IAAI,kFAAkF,YAAY,EAAE,CAAC;YACzI,MAAM,GAAG,wBAAwB,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;SAC5D;QAED,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAElC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAEhC,IAAI,CAAC,cAAc,GAAG,OAAO,IAAI,EAAE,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG,iBAAiB,CAAC,MAAM,CAAC,MAAM,EAAE,UAAU,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IACpF,CAAC;IA/FD;;;;OAIG;IACH,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC;IACzC,CAAC;IAED;;;;;OAKG;IACH,IAAI,uBAAuB;QACzB,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC;IACnC,CAAC;IAgFO,iBAAiB,CACvB,aAA6B,EAC7B,UAA+B,EAC/B,WAAoB,KAAK;QAEzB,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;QAC3B,MAAM,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,mBAAmB,aAAa,EAAE,EAAE;YAChE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM;YACpD,MAAM,EAAE,UAAU;SACnB,CAAC,CAAC;QAEH,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,oBAAoB,CAAC,CAAC;QACxD,IAAI,CAAC,YAAY,CAAC,yBAAyB,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAChE,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEjD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACG,KAAK;;YACT,IAAI;gBACF,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE;oBACrC,yBAAyB;oBACzB,KAAK,MAAM,UAAU,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;wBAC3D,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE,CAAC;qBACjD;oBACD,2BAA2B;oBAC3B,KAAK,MAAM,YAAY,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;wBAC/D,MAAM,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,KAAK,EAAE,CAAC;qBACrD;oBACD,yBAAyB;oBACzB,MAAM,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;oBACvC,+BAA+B;oBAC/B,MAAM,IAAI,CAAC,QAAQ,CAAC,iBAAkB,CAAC,KAAK,EAAE,CAAC;oBAC/C,MAAM,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;oBACvC,IAAI,CAAC,QAAQ,CAAC,wBAAwB,GAAG,IAAI,CAAC;oBAC9C,MAAM,CAAC,IAAI,CAAC,gDAAgD,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;iBAC3F;aACF;YAAC,OAAO,GAAG,EAAE;gBACZ,GAAG,GAAG,GAAG,YAAY,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;gBACvD,MAAM,CAAC,OAAO,CACZ,mDAAmD,IAAI,CAAC,QAAQ,CAAC,YAAY,OAAO,GAAG,EAAE,CAC1F,CAAC;gBACF,kBAAkB,CAAC,GAAG,CAAC,CAAC;gBACxB,MAAM,GAAG,CAAC;aACX;QACH,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;OAiBG;IACH,cAAc,CAAC,OAAiC;QAC9C,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,EAAE,CAAC;SACd;QACD,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;YACzB,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC;SACzD;QACD,4BAA4B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC5C,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACxF,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;OAsBG;IACH,cAAc,CACZ,aAAqB,EACrB,WAAmB,EACnB,aAA4B,EAC5B,OAAiC;QAEjC,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,EAAE,CAAC;SACd;QACD,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;YACzB,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC;SACzD;QACD,4BAA4B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC5C,gCAAgC,CAC9B,IAAI,CAAC,QAAQ,CAAC,YAAY,EAC1B,gBAAgB,EAChB,eAAe,EACf,aAAa,CACd,CAAC;QACF,gCAAgC,CAC9B,IAAI,CAAC,QAAQ,CAAC,YAAY,EAC1B,gBAAgB,EAChB,aAAa,EACb,WAAW,CACZ,CAAC;QACF,gCAAgC,CAC9B,IAAI,CAAC,QAAQ,CAAC,YAAY,EAC1B,gBAAgB,EAChB,eAAe,EACf,aAAa,CACd,CAAC;QACF,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;QAClC,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,QAAQ,EAAE,aAAa,EAAE,WAAW,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;IACjG,CAAC;IAED;;;;;;OAMG;IACG,aAAa,CAAC,UAAwC,EAAE;;YAC5D,4BAA4B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC5C,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,uBAAuB,EAAE,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC;YAC3F,IAAI;gBACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,iBAAkB,CAAC,wBAAwB,CAAC;oBAC7E,YAAY,EAAE,IAAI,CAAC,cAAc,CAAC,YAAY;oBAC9C,WAAW,EAAE,OAAO,CAAC,WAAW;iBACjC,CAAC,CAAC;gBACH,UAAU,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC;gBACjD,OAAO,MAAM,CAAC;aACf;YAAC,OAAO,GAAG,EAAE;gBACZ,UAAU,CAAC,SAAS,CAAC;oBACnB,IAAI,EAAE,aAAa,CAAC,OAAO;oBAC3B,OAAO,EAAE,GAAG,CAAC,OAAO;iBACrB,CAAC,CAAC;gBACH,MAAM,CAAC,OAAO,CAAC,iEAAiE,EAAE,GAAG,CAAC,CAAC;gBACvF,kBAAkB,CAAC,GAAG,CAAC,CAAC;gBACxB,MAAM,GAAG,CAAC;aACX;oBAAS;gBACR,UAAU,CAAC,GAAG,EAAE,CAAC;aAClB;QACH,CAAC;KAAA;IAED;;;;;;OAMG;IACG,eAAe,CAAC,OAA+B;;YACnD,4BAA4B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC5C,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,aAAa,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC;YAC3F,IAAI;gBACF,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,aAAa,iCACvC,OAAO,KACV,cAAc,EAAE;wBACd,WAAW,EAAE;4BACX,MAAM,EAAE,UAAU;yBACnB;qBACF,IACD,CAAC;gBACH,UAAU,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC;gBACjD,OAAO,WAAW,CAAC,YAAY,CAAC;aACjC;YAAC,OAAO,GAAG,EAAE;gBACZ,UAAU,CAAC,SAAS,CAAC;oBACnB,IAAI,EAAE,aAAa,CAAC,OAAO;oBAC3B,OAAO,EAAE,GAAG,CAAC,OAAO;iBACrB,CAAC,CAAC;gBACH,MAAM,CAAC,OAAO,CAAC,uDAAuD,EAAE,GAAG,CAAC,CAAC;gBAC7E,kBAAkB,CAAC,GAAG,CAAC,CAAC;gBACxB,MAAM,GAAG,CAAC;aACX;oBAAS;gBACR,UAAU,CAAC,GAAG,EAAE,CAAC;aAClB;QACH,CAAC;KAAA;IAED;;;;;;;OAOG;IACG,sBAAsB,CAC1B,WAAmB,EACnB,UAAyC,EAAE;;YAE3C,4BAA4B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC5C,gCAAgC,CAC9B,IAAI,CAAC,QAAQ,CAAC,YAAY,EAC1B,wBAAwB,EACxB,aAAa,EACb,WAAW,CACZ,CAAC;YACF,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;YAClC,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,wBAAwB,EAAE,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC;YAC5F,IAAI;gBACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,iBAAkB,CAAC,sBAAsB,CAAC,WAAW,EAAE;oBACxF,YAAY,EAAE,IAAI,CAAC,cAAc,CAAC,YAAY;oBAC9C,WAAW,EAAE,OAAO,CAAC,WAAW;iBACjC,CAAC,CAAC;gBACH,UAAU,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC;gBACjD,OAAO,MAAM,CAAC;aACf;YAAC,OAAO,GAAG,EAAE;gBACZ,UAAU,CAAC,SAAS,CAAC;oBACnB,IAAI,EAAE,aAAa,CAAC,OAAO;oBAC3B,OAAO,EAAE,GAAG,CAAC,OAAO;iBACrB,CAAC,CAAC;gBACH,MAAM,CAAC,OAAO,CAAC,+DAA+D,EAAE,GAAG,CAAC,CAAC;gBACrF,kBAAkB,CAAC,GAAG,CAAC,CAAC;gBACxB,MAAM,GAAG,CAAC;aACX;oBAAS;gBACR,UAAU,CAAC,GAAG,EAAE,CAAC;aAClB;QACH,CAAC;KAAA;;AAED;;;GAGG;AACI,uCAAwB,GAAW,SAAS,CAAC,oBAAoB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { logger, logErrorStackTrace } from \"../log\";\nimport {\n  TokenCredential,\n  EventHubConnectionConfig,\n  SharedKeyCredential,\n  ConnectionConfig,\n  isTokenCredential,\n  RetryOptions,\n  Constants,\n  parseConnectionString,\n  EventHubConnectionStringModel\n} from \"@azure/core-amqp\";\n\nimport { ConnectionContext } from \"../connectionContext\";\nimport { PartitionProperties, EventHubProperties } from \"../managementClient\";\nimport { EventPosition } from \"../eventPosition\";\nimport { EventHubProducer } from \"../sender\";\nimport { EventHubConsumer } from \"../receiver\";\nimport { throwTypeErrorIfParameterMissing, throwErrorIfConnectionClosed } from \"../util/error\";\nimport { getTracer } from \"@azure/core-tracing\";\nimport { SpanContext, Span, SpanKind, CanonicalCode } from \"@opentelemetry/types\";\nimport { getParentSpan } from \"../util/operationOptions\";\nimport { OperationNames, EventHubProducerOptions } from \"../models/private\";\nimport {\n  GetEventHubPropertiesOptions,\n  GetPartitionIdsOptions,\n  GetPartitionPropertiesOptions,\n  EventHubClientOptions\n} from \"../models/public\";\n\n/**\n * The set of options to configure the behavior of an `EventHubConsumer`.\n * These can be specified when creating the consumer using the `createConsumer` method.\n * - `ownerLevel`  : A number indicating that the consumer intends to be an exclusive consumer of events resulting in other\n * consumers to fail if their `ownerLevel` is lower or doesn't exist.\n * - `retryOptions`: The retry options used to govern retry attempts when an issue is encountered while receiving events.\n * A simple usage can be `{ \"maxRetries\": 4 }`.\n *\n * Example usage:\n * ```js\n * {\n *     retryOptions: {\n *         maxRetries: 4\n *     },\n *     trackLastEnqueuedEventProperties: false\n * }\n * ```\n * @internal\n * @ignore\n */\nexport interface EventHubConsumerOptions {\n  /**\n   * @property\n   * The owner level associated with an exclusive consumer.\n   *\n   * When provided, the owner level indicates that a consumer is intended to be the exclusive receiver of events for the\n   * requested partition and the associated consumer group.\n   * When multiple consumers exist for the same partition/consumer group pair, then the ones with lower or no\n   * `ownerLevel` will get a `ReceiverDisconnectedError` during the next attempted receive operation.\n   */\n  ownerLevel?: number;\n  /**\n   * @property\n   * The retry options used to govern retry attempts when an issue is encountered while receiving events.\n   * If no value is provided here, the retry options set when creating the `EventHubClient` is used.\n   */\n  retryOptions?: RetryOptions;\n  /**\n   * @property\n   * Indicates whether or not the consumer should request information on the last enqueued event on its\n   * associated partition, and track that information as events are received.\n\n   * When information about the partition's last enqueued event is being tracked, each event received \n   * from the Event Hubs service will carry metadata about the partition that it otherwise would not. This results in a small amount of\n   * additional network bandwidth consumption that is generally a favorable trade-off when considered\n   * against periodically making requests for partition properties using the Event Hub client.\n   */\n  trackLastEnqueuedEventProperties?: boolean;\n}\n\n/**\n * @class\n * The client is the main point of interaction with Azure Event Hubs service.\n * It offers connection to a specific Event Hub within the Event Hubs namespace along with\n * operations for sending event data, receiving events, and inspecting the connected Event Hub.\n *\n * There are multiple ways to create an `EventHubClient`\n * - Use the connection string from the SAS policy created for your Event Hub instance.\n * - Use the connection string from the SAS policy created for your Event Hub namespace,\n * and the name of the Event Hub instance\n * - Use the fully qualified domain name of your Event Hub namespace like `<yournamespace>.servicebus.windows.net`,\n * and a credentials object.\n *\n * @internal\n * @ignore\n */\nexport class EventHubClient {\n  /**\n   * Describes the amqp connection context for the eventhub client.\n   */\n  private _context: ConnectionContext;\n\n  /**\n   * The options passed by the user when creating the EventHubClient instance.\n   */\n  private _clientOptions: EventHubClientOptions;\n\n  /**\n   * The Service Bus endpoint.\n   * @internal\n   * @ignore\n   */\n  public readonly endpoint: string;\n\n  /**\n   * @property\n   * @readonly\n   * The name of the Event Hub instance for which this client is created.\n   */\n  get eventHubName(): string {\n    return this._context.config.entityPath;\n  }\n\n  /**\n   * @property\n   * @readonly\n   * The fully qualified Event Hubs namespace for which this client is created. This is likely to be similar to\n   * <yournamespace>.servicebus.windows.net.\n   */\n  get fullyQualifiedNamespace(): string {\n    return this._context.config.host;\n  }\n\n  constructor(connectionString: string, options?: EventHubClientOptions);\n  constructor(connectionString: string, eventHubName: string, options?: EventHubClientOptions);\n  constructor(\n    host: string,\n    eventHubName: string,\n    credential: TokenCredential,\n    options?: EventHubClientOptions\n  );\n  constructor(\n    hostOrConnectionString: string,\n    eventHubNameOrOptions?: string | EventHubClientOptions,\n    credentialOrOptions?: TokenCredential | EventHubClientOptions,\n    options?: EventHubClientOptions\n  ) {\n    let connectionString;\n    let config;\n    let credential: TokenCredential | SharedKeyCredential;\n    hostOrConnectionString = String(hostOrConnectionString);\n\n    if (!isTokenCredential(credentialOrOptions)) {\n      const parsedCS = parseConnectionString<EventHubConnectionStringModel>(hostOrConnectionString);\n      if (\n        !(\n          parsedCS.EntityPath ||\n          (typeof eventHubNameOrOptions === \"string\" && eventHubNameOrOptions)\n        )\n      ) {\n        throw new TypeError(\n          `Either provide \"eventHubName\" or the \"connectionString\": \"${hostOrConnectionString}\", ` +\n            `must contain \"EntityPath=<your-event-hub-name>\".`\n        );\n      }\n      if (\n        parsedCS.EntityPath &&\n        typeof eventHubNameOrOptions === \"string\" &&\n        eventHubNameOrOptions &&\n        parsedCS.EntityPath !== eventHubNameOrOptions\n      ) {\n        throw new TypeError(\n          `The entity path \"${parsedCS.EntityPath}\" in connectionString: \"${hostOrConnectionString}\" ` +\n            `doesn't match with eventHubName: \"${eventHubNameOrOptions}\".`\n        );\n      }\n      connectionString = hostOrConnectionString;\n      if (typeof eventHubNameOrOptions !== \"string\") {\n        // connectionstring and/or options were passed to constructor\n        config = EventHubConnectionConfig.create(connectionString);\n        options = eventHubNameOrOptions;\n      } else {\n        // connectionstring, eventHubName and/or options were passed to constructor\n        const eventHubName = eventHubNameOrOptions;\n        config = EventHubConnectionConfig.create(connectionString, eventHubName);\n        options = credentialOrOptions;\n      }\n      // Since connectionstring was passed, create a SharedKeyCredential\n      credential = new SharedKeyCredential(config.sharedAccessKeyName, config.sharedAccessKey);\n    } else {\n      // host, eventHubName, a TokenCredential and/or options were passed to constructor\n      const eventHubName = eventHubNameOrOptions;\n      let host = hostOrConnectionString;\n      credential = credentialOrOptions;\n      if (!eventHubName) {\n        throw new TypeError(`\"eventHubName\" is missing`);\n      }\n\n      if (!host.endsWith(\"/\")) host += \"/\";\n      connectionString = `Endpoint=sb://${host};SharedAccessKeyName=defaultKeyName;SharedAccessKey=defaultKeyValue;EntityPath=${eventHubName}`;\n      config = EventHubConnectionConfig.create(connectionString);\n    }\n\n    ConnectionConfig.validate(config);\n\n    this.endpoint = config.endpoint;\n\n    this._clientOptions = options || {};\n    this._context = ConnectionContext.create(config, credential, this._clientOptions);\n  }\n\n  private _createClientSpan(\n    operationName: OperationNames,\n    parentSpan?: Span | SpanContext,\n    internal: boolean = false\n  ): Span {\n    const tracer = getTracer();\n    const span = tracer.startSpan(`Azure.EventHubs.${operationName}`, {\n      kind: internal ? SpanKind.INTERNAL : SpanKind.CLIENT,\n      parent: parentSpan\n    });\n\n    span.setAttribute(\"az.namespace\", \"Microsoft.EventHub\");\n    span.setAttribute(\"message_bus.destination\", this.eventHubName);\n    span.setAttribute(\"peer.address\", this.endpoint);\n\n    return span;\n  }\n\n  /**\n   * Closes the AMQP connection to the Event Hub instance,\n   * returning a promise that will be resolved when disconnection is completed.\n   * @returns Promise<void>\n   * @throws Error if the underlying connection encounters an error while closing.\n   */\n  async close(): Promise<void> {\n    try {\n      if (this._context.connection.isOpen()) {\n        // Close all the senders.\n        for (const senderName of Object.keys(this._context.senders)) {\n          await this._context.senders[senderName].close();\n        }\n        // Close all the receivers.\n        for (const receiverName of Object.keys(this._context.receivers)) {\n          await this._context.receivers[receiverName].close();\n        }\n        // Close the cbs session;\n        await this._context.cbsSession.close();\n        // Close the management session\n        await this._context.managementSession!.close();\n        await this._context.connection.close();\n        this._context.wasConnectionCloseCalled = true;\n        logger.info(\"Closed the amqp connection '%s' on the client.\", this._context.connectionId);\n      }\n    } catch (err) {\n      err = err instanceof Error ? err : JSON.stringify(err);\n      logger.warning(\n        `An error occurred while closing the connection \"${this._context.connectionId}\":\\n${err}`\n      );\n      logErrorStackTrace(err);\n      throw err;\n    }\n  }\n\n  /**\n   * Creates an Event Hub producer that can send events to the Event Hub.\n   * If `partitionId` is specified in the `options`, all event data sent using the producer\n   * will be sent to the specified partition.\n   * Otherwise, they are automatically routed to an available partition by the Event Hubs service.\n   *\n   * Automatic routing of partitions is recommended because:\n   *  - The sending of events will be highly available.\n   *  - The event data will be evenly distributed among all available partitions.\n   *\n   * @param options The set of options to apply when creating the producer.\n   * - `partitionId`  : The identifier of the partition that the producer can be bound to.\n   * - `retryOptions` : The retry options used to govern retry attempts when an issue is encountered while sending events.\n   * A simple usage can be `{ \"maxRetries\": 4 }`.\n   *\n   * @throws Error if the underlying connection has been closed, create a new EventHubClient.\n   * @returns EventHubProducer\n   */\n  createProducer(options?: EventHubProducerOptions): EventHubProducer {\n    if (!options) {\n      options = {};\n    }\n    if (!options.retryOptions) {\n      options.retryOptions = this._clientOptions.retryOptions;\n    }\n    throwErrorIfConnectionClosed(this._context);\n    return new EventHubProducer(this.eventHubName, this.endpoint, this._context, options);\n  }\n\n  /**\n   * Creates an Event Hub consumer that can receive events from a specific Event Hub partition,\n   * in the context of a specific consumer group.\n   *\n   * Multiple consumers are allowed on the same partition in a consumer group.\n   * If there is a need to have an exclusive consumer for a partition in a consumer group,\n   * then specify the `ownerLevel` in the `options`.\n   * Exclusive consumers were previously referred to as \"Epoch Receivers\".\n   *\n   * @param consumerGroup The name of the consumer group this consumer is associated with.\n   * Events are read in the context of this group. You can get this information from Azure portal.\n   * @param partitionId The identifier of the Event Hub partition from which events will be received.\n   * You can get identifiers for all partitions by using the `getPartitionProperties` method on the `EventHubClient`.\n   * @param eventPosition The position within the partition where the consumer should begin reading events.\n   * @param options The set of options to apply when creating the consumer.\n   * - `ownerLevel`  : A number indicating that the consumer intends to be an exclusive consumer of events resulting in other\n   * consumers to fail if their `ownerLevel` is lower or doesn't exist.\n   * - `retryOptions`: The retry options used to govern retry attempts when an issue is encountered while receiving events.\n   * A simple usage can be `{ \"maxRetries\": 4 }`.\n   *\n   * @throws Error if the underlying connection has been closed, create a new EventHubClient.\n   * @throws TypeError if a required parameter is missing.\n   */\n  createConsumer(\n    consumerGroup: string,\n    partitionId: string,\n    eventPosition: EventPosition,\n    options?: EventHubConsumerOptions\n  ): EventHubConsumer {\n    if (!options) {\n      options = {};\n    }\n    if (!options.retryOptions) {\n      options.retryOptions = this._clientOptions.retryOptions;\n    }\n    throwErrorIfConnectionClosed(this._context);\n    throwTypeErrorIfParameterMissing(\n      this._context.connectionId,\n      \"createConsumer\",\n      \"consumerGroup\",\n      consumerGroup\n    );\n    throwTypeErrorIfParameterMissing(\n      this._context.connectionId,\n      \"createConsumer\",\n      \"partitionId\",\n      partitionId\n    );\n    throwTypeErrorIfParameterMissing(\n      this._context.connectionId,\n      \"createConsumer\",\n      \"eventPosition\",\n      eventPosition\n    );\n    partitionId = String(partitionId);\n    return new EventHubConsumer(this._context, consumerGroup, partitionId, eventPosition, options);\n  }\n\n  /**\n   * Provides the Event Hub runtime information.\n   * @param [options] The set of options to apply to the operation call.\n   * @returns A promise that resolves with EventHubProperties.\n   * @throws Error if the underlying connection has been closed, create a new EventHubClient.\n   * @throws AbortError if the operation is cancelled via the abortSignal3.\n   */\n  async getProperties(options: GetEventHubPropertiesOptions = {}): Promise<EventHubProperties> {\n    throwErrorIfConnectionClosed(this._context);\n    const clientSpan = this._createClientSpan(\"getEventHubProperties\", getParentSpan(options));\n    try {\n      const result = await this._context.managementSession!.getHubRuntimeInformation({\n        retryOptions: this._clientOptions.retryOptions,\n        abortSignal: options.abortSignal\n      });\n      clientSpan.setStatus({ code: CanonicalCode.OK });\n      return result;\n    } catch (err) {\n      clientSpan.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: err.message\n      });\n      logger.warning(\"An error occurred while getting the hub runtime information: %O\", err);\n      logErrorStackTrace(err);\n      throw err;\n    } finally {\n      clientSpan.end();\n    }\n  }\n\n  /**\n   * Provides an array of partitionIds.\n   * @param [options] The set of options to apply to the operation call.\n   * @returns A promise that resolves with an Array of strings.\n   * @throws Error if the underlying connection has been closed, create a new EventHubClient.\n   * @throws AbortError if the operation is cancelled via the abortSignal.\n   */\n  async getPartitionIds(options: GetPartitionIdsOptions): Promise<Array<string>> {\n    throwErrorIfConnectionClosed(this._context);\n    const clientSpan = this._createClientSpan(\"getPartitionIds\", getParentSpan(options), true);\n    try {\n      const runtimeInfo = await this.getProperties({\n        ...options,\n        tracingOptions: {\n          spanOptions: {\n            parent: clientSpan\n          }\n        }\n      });\n      clientSpan.setStatus({ code: CanonicalCode.OK });\n      return runtimeInfo.partitionIds;\n    } catch (err) {\n      clientSpan.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: err.message\n      });\n      logger.warning(\"An error occurred while getting the partition ids: %O\", err);\n      logErrorStackTrace(err);\n      throw err;\n    } finally {\n      clientSpan.end();\n    }\n  }\n\n  /**\n   * Provides information about the specified partition.\n   * @param partitionId Partition ID for which partition information is required.\n   * @param [options] The set of options to apply to the operation call.\n   * @returns A promise that resoloves with PartitionProperties.\n   * @throws Error if the underlying connection has been closed, create a new EventHubClient.\n   * @throws AbortError if the operation is cancelled via the abortSignal.\n   */\n  async getPartitionProperties(\n    partitionId: string,\n    options: GetPartitionPropertiesOptions = {}\n  ): Promise<PartitionProperties> {\n    throwErrorIfConnectionClosed(this._context);\n    throwTypeErrorIfParameterMissing(\n      this._context.connectionId,\n      \"getPartitionProperties\",\n      \"partitionId\",\n      partitionId\n    );\n    partitionId = String(partitionId);\n    const clientSpan = this._createClientSpan(\"getPartitionProperties\", getParentSpan(options));\n    try {\n      const result = await this._context.managementSession!.getPartitionProperties(partitionId, {\n        retryOptions: this._clientOptions.retryOptions,\n        abortSignal: options.abortSignal\n      });\n      clientSpan.setStatus({ code: CanonicalCode.OK });\n      return result;\n    } catch (err) {\n      clientSpan.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: err.message\n      });\n      logger.warning(\"An error occurred while getting the partition information: %O\", err);\n      logErrorStackTrace(err);\n      throw err;\n    } finally {\n      clientSpan.end();\n    }\n  }\n\n  /**\n   * @property\n   * The name of the default consumer group in the Event Hubs service.\n   */\n  static defaultConsumerGroupName: string = Constants.defaultConsumerGroup;\n}\n"]}