{"version":3,"file":"sender.js","sourceRoot":"","sources":["../../src/sender.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { EventData } from \"./eventData\";\nimport { EventHubSender } from \"./eventHubSender\";\nimport { EventHubProducerOptions } from \"../src/models/private\";\nimport { SendOptions, CreateBatchOptions } from \"../src/models/public\";\nimport { ConnectionContext } from \"./connectionContext\";\nimport { logger, logErrorStackTrace } from \"./log\";\nimport { throwErrorIfConnectionClosed, throwTypeErrorIfParameterMissing } from \"./util/error\";\nimport { EventDataBatch, isEventDataBatch, EventDataBatchImpl } from \"./eventDataBatch\";\nimport { getTracer } from \"@azure/core-tracing\";\nimport { SpanContext, Span, SpanKind, CanonicalCode, Link } from \"@opentelemetry/types\";\nimport { instrumentEventData, TRACEPARENT_PROPERTY } from \"./diagnostics/instrumentEventData\";\nimport { createMessageSpan } from \"./diagnostics/messageSpan\";\nimport { getParentSpan } from \"./util/operationOptions\";\n\n/**\n * A producer responsible for sending events to an Event Hub.\n * To create a producer use the `createProducer()` method on your `EventHubClient`.\n * You can pass the below in the `options` when creating a producer.\n * - `partitionId`  : The identifier of the partition that the producer can be bound to.\n * - `retryOptions` : The retry options used to govern retry attempts when an issue is encountered while sending events.\n * A simple usage can be `{ \"maxRetries\": 4 }`.\n *\n * If `partitionId` is specified when creating a producer, all event data sent using the producer\n * will be sent to the specified partition.\n * Otherwise, they are automatically routed to an available partition by the Event Hubs service.\n *\n * Automatic routing of partitions is recommended because:\n *  - The sending of events will be highly available.\n *  - The event data will be evenly distributed among all available partitions.\n *\n * @class\n * @internal\n * @ignore\n */\nexport class EventHubProducer {\n  /**\n   * @property Describes the amqp connection context for the Client.\n   */\n  private _context: ConnectionContext;\n  /**\n   * @property Denotes if close() was called on this sender\n   */\n  private _isClosed: boolean = false;\n\n  private _senderOptions: EventHubProducerOptions;\n\n  private _eventHubSender: EventHubSender | undefined;\n\n  private _eventHubName: string;\n  private _endpoint: string;\n\n  /**\n   * @property Returns `true` if either the producer or the client that created it has been closed.\n   * @readonly\n   */\n  public get isClosed(): boolean {\n    return this._isClosed || this._context.wasConnectionCloseCalled;\n  }\n\n  /**\n   * EventHubProducer should not be constructed using `new EventHubProduer()`\n   * Use the `createProducer()` method on your `EventHubClient` instead.\n   * @private\n   * @constructor\n   * @internal\n   * @ignore\n   */\n  constructor(\n    eventHubName: string,\n    endpoint: string,\n    context: ConnectionContext,\n    options?: EventHubProducerOptions\n  ) {\n    this._context = context;\n    this._senderOptions = options || {};\n    const partitionId =\n      this._senderOptions.partitionId != undefined\n        ? String(this._senderOptions.partitionId)\n        : undefined;\n    this._eventHubSender = EventHubSender.create(this._context, partitionId);\n    this._eventHubName = eventHubName;\n    this._endpoint = endpoint;\n  }\n\n  /**\n   * Creates an instance of `EventDataBatch` to which one can add events until the maximum supported size is reached.\n   * The batch can be passed to the `send()` method of the `EventHubProducer` to be sent to Azure Event Hubs.\n   * @param options  A set of options to configure the behavior of the batch.\n   * - `partitionKey`  : A value that is hashed to produce a partition assignment.\n   * Not applicable if the `EventHubProducer` was created using a `partitionId`.\n   * - `maxSizeInBytes`: The upper limit for the size of batch. The `tryAdd` function will return `false` after this limit is reached.\n   * - `abortSignal`   : A signal the request to cancel the send operation.\n   * @returns Promise<EventDataBatch>\n   */\n  async createBatch(options?: CreateBatchOptions): Promise<EventDataBatch> {\n    this._throwIfSenderOrConnectionClosed();\n    if (!options) {\n      options = {};\n    }\n    // throw an error if partition key and partition id are both defined\n    if (\n      typeof options.partitionKey === \"string\" &&\n      typeof this._senderOptions.partitionId === \"string\"\n    ) {\n      const error = new Error(\n        \"Creating a batch with partition key is not supported when using producers that were created using a partition id.\"\n      );\n      logger.warning(\n        \"[%s] Creating a batch with partition key is not supported when using producers that were created using a partition id. %O\",\n        this._context.connectionId,\n        error\n      );\n      logErrorStackTrace(error);\n      throw error;\n    }\n\n    let maxMessageSize = await this._eventHubSender!.getMaxMessageSize({\n      retryOptions: this._senderOptions.retryOptions,\n      abortSignal: options.abortSignal\n    });\n    if (options.maxSizeInBytes) {\n      if (options.maxSizeInBytes > maxMessageSize) {\n        const error = new Error(\n          `Max message size (${options.maxSizeInBytes} bytes) is greater than maximum message size (${maxMessageSize} bytes) on the AMQP sender link.`\n        );\n        logger.warning(\n          `[${this._context.connectionId}] Max message size (${options.maxSizeInBytes} bytes) is greater than maximum message size (${maxMessageSize} bytes) on the AMQP sender link. ${error}`\n        );\n        logErrorStackTrace(error);\n        throw error;\n      }\n      maxMessageSize = options.maxSizeInBytes;\n    }\n    return new EventDataBatchImpl(\n      this._context,\n      maxMessageSize,\n      options.partitionKey,\n      options.partitionId\n    );\n  }\n\n  /**\n   * Send one or more of events to the associated Event Hub.\n   *\n   * @param eventData  An individual `EventData` object, or an array of `EventData` objects or an\n   * instance of `EventDataBatch`.\n   * @param options The set of options that can be specified to influence the way in which\n   * events are sent to the associated Event Hub.\n   * - `partitionKey` : A value that is hashed to produce a partition assignment.\n   * Not applicable if the `EventHubProducer` was created using a `partitionId`.\n   * - `abortSignal`  : A signal the request to cancel the send operation.\n   *\n   * @returns Promise<void>\n   * @throws AbortError if the operation is cancelled via the abortSignal.\n   * @throws MessagingError if an error is encountered while sending a message.\n   * @throws TypeError if a required parameter is missing.\n   * @throws Error if the underlying connection or sender has been closed.\n   * @throws Error if a partitionKey is provided when the producer was created with a partitionId.\n   * @throws Error if batch was created with partitionKey different than the one provided in the options.\n   * Create a new producer using the EventHubClient createProducer method.\n   */\n  async send(\n    eventData: EventData | EventData[] | EventDataBatch,\n    options: SendOptions = {}\n  ): Promise<void> {\n    this._throwIfSenderOrConnectionClosed();\n    throwTypeErrorIfParameterMissing(this._context.connectionId, \"send\", \"eventData\", eventData);\n    if (Array.isArray(eventData) && eventData.length === 0) {\n      logger.info(`[${this._context.connectionId}] Empty array was passed. No events to send.`);\n      return;\n    }\n    if (isEventDataBatch(eventData) && eventData.count === 0) {\n      logger.info(`[${this._context.connectionId}] Empty batch was passsed. No events to send.`);\n      return;\n    }\n    if (!Array.isArray(eventData) && !isEventDataBatch(eventData)) {\n      eventData = [eventData];\n    }\n\n    // link message span contexts\n    let spanContextsToLink: SpanContext[] = [];\n    if (Array.isArray(eventData)) {\n      for (let i = 0; i < eventData.length; i++) {\n        const event = eventData[i];\n        if (!event.properties || !event.properties[TRACEPARENT_PROPERTY]) {\n          const messageSpan = createMessageSpan(getParentSpan(options));\n          // since these message spans are created from same context as the send span,\n          // these message spans don't need to be linked.\n          // replace the original event with the instrumented one\n          eventData[i] = instrumentEventData(eventData[i], messageSpan);\n          messageSpan.end();\n        }\n      }\n    } else if (isEventDataBatch(eventData)) {\n      spanContextsToLink = eventData._messageSpanContexts;\n    }\n\n    const sendSpan = this._createSendSpan(getParentSpan(options), spanContextsToLink);\n\n    try {\n      const result = await this._eventHubSender!.send(eventData, {\n        ...this._senderOptions,\n        ...options\n      });\n      sendSpan.setStatus({ code: CanonicalCode.OK });\n      return result;\n    } catch (err) {\n      sendSpan.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: err.message\n      });\n      throw err;\n    } finally {\n      sendSpan.end();\n    }\n  }\n\n  /**\n   * Closes the underlying AMQP sender link.\n   * Once closed, the producer cannot be used for any further operations.\n   * Use the `createProducer` function on the EventHubClient to instantiate a new EventHubProducer.\n   *\n   * @returns\n   * @throws Error if the underlying connection encounters an error while closing.\n   */\n  async close(): Promise<void> {\n    try {\n      if (this._context.connection && this._context.connection.isOpen() && this._eventHubSender) {\n        await this._eventHubSender.close();\n        this._eventHubSender = undefined;\n      }\n      this._isClosed = true;\n    } catch (err) {\n      logger.warning(\n        \"[%s] An error occurred while closing the Sender for %s: %O\",\n        this._context.connectionId,\n        this._context.config.entityPath,\n        err\n      );\n      logErrorStackTrace(err);\n      throw err;\n    }\n  }\n\n  private _createSendSpan(\n    parentSpan?: Span | SpanContext,\n    spanContextsToLink: SpanContext[] = []\n  ): Span {\n    const links: Link[] = spanContextsToLink.map((spanContext) => {\n      return {\n        spanContext\n      };\n    });\n    const tracer = getTracer();\n    const span = tracer.startSpan(\"Azure.EventHubs.send\", {\n      kind: SpanKind.CLIENT,\n      parent: parentSpan,\n      links\n    });\n\n    span.setAttribute(\"az.namespace\", \"Microsoft.EventHub\");\n    span.setAttribute(\"message_bus.destination\", this._eventHubName);\n    span.setAttribute(\"peer.address\", this._endpoint);\n\n    return span;\n  }\n\n  private _throwIfSenderOrConnectionClosed(): void {\n    throwErrorIfConnectionClosed(this._context);\n    if (this.isClosed) {\n      const errorMessage =\n        `The EventHubProducer for \"${this._context.config.entityPath}\" has been closed and can no longer be used. ` +\n        `Please create a new EventHubProducer using the \"createProducer\" function on the EventHubClient.`;\n      const error = new Error(errorMessage);\n      logger.warning(`[${this._context.connectionId}] %O`, error);\n      logErrorStackTrace(error);\n      throw error;\n    }\n  }\n}\n"]}