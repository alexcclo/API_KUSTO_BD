{"version":3,"file":"operationOptions.js","sourceRoot":"","sources":["../../../src/util/operationOptions.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAgClC;;;GAGG;AACH,MAAM,UAAU,aAAa,CAC3B,OAAiD;IAEjD,OAAO,CACL,OAAO;QACP,OAAO,CAAC,cAAc;QACtB,OAAO,CAAC,cAAc,CAAC,WAAW;QAClC,OAAO,CAAC,cAAc,CAAC,WAAW,CAAC,MAAM,CAC1C,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { Span, SpanContext, SpanOptions } from \"@opentelemetry/types\";\n\n/**\n * Options for configuring tracing.\n */\nexport interface TracingOptions {\n  /**\n   * Options for configuring tracing.\n   */\n  tracingOptions?: {\n    /**\n     * OpenTelemetry SpanOptions used to create a span when tracing is enabled.\n     */\n    spanOptions?: SpanOptions;\n  };\n}\n\n/**\n * Options for configuring tracing and the abortSignal.\n */\n// NOTE: This class is intended to mirror the relevant fields and structure from\n// @azure/core-http OperationOptions\nexport interface OperationOptions extends TracingOptions {\n  /**\n   * The signal which can be used to abort requests.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * @internal\n * @ignore\n */\nexport function getParentSpan(\n  options: Pick<OperationOptions, \"tracingOptions\">\n): Span | SpanContext | undefined {\n  return (\n    options &&\n    options.tracingOptions &&\n    options.tracingOptions.spanOptions &&\n    options.tracingOptions.spanOptions.parent\n  );\n}\n"]}