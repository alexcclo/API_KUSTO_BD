// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import { __awaiter } from "tslib";
import uuid from "uuid/v4";
import { PumpManagerImpl } from "./pumpManager";
import { AbortController } from "@azure/abort-controller";
import { logger, logErrorStackTrace } from "./log";
import { FairPartitionLoadBalancer } from "./partitionLoadBalancer";
import { PartitionProcessor } from "./partitionProcessor";
import { latestEventPosition, isEventPosition } from "./eventPosition";
import { delayWithoutThrow } from "./util/delayWithoutThrow";
import { CloseReason } from "./models/public";
/**
 * Event Processor based applications consist of one or more instances of EventProcessor which have been
 * configured to consume events from the same Event Hub and consumer group. They balance the
 * workload across different instances by distributing the partitions to be processed among themselves.
 * They also allow the user to track progress when events are processed using checkpoints.
 *
 * A checkpoint is meant to represent the last successfully processed event by the user from a particular
 * partition of a consumer group in an Event Hub instance.
 *
 * You need the below to create an instance of `EventProcessor`
 * - The name of the consumer group from which you want to process events
 * - An instance of `EventHubClient` class that was created for the Event Hub instance.
 * - A user implemented class that extends the `PartitionProcessor` class. To get started, you can use the
 * base class `PartitionProcessor` which simply logs the incoming events. To provide your code to process incoming
 * events, extend this class and override the `processEvents()` method. For example:
 * ```js
 * class SamplePartitionProcessor extends PartitionProcessor {
 *     async processEvents(events) {
 *        // user code to process events here
 *        // Information on the partition being processed is available as properties on the `SamplePartitionProcessor` class
 *        // use `this.updateCheckpoint()` method to update checkpoints as needed
 *     }
 * }
 * ```
 * - An instance of `CheckpointStore`. See &commat;azure/eventhubs-checkpointstore-blob for an implementation.
 * For production, choose an implementation that will store checkpoints and partition ownership details to a durable store.
 * Implementations of `CheckpointStore` can be found on npm by searching for packages with the prefix &commat;azure/eventhub-checkpointstore-.
 *
 * @class EventProcessor
 * @internal
 * @ignore
 */
export class EventProcessor {
    /**
     * @param consumerGroup The name of the consumer group from which you want to process events.
     * @param eventHubClient An instance of `EventHubClient` that was created for the Event Hub instance.
     * @param PartitionProcessorClass A user-provided class that extends the `PartitionProcessor` class.
     * This class will be responsible for processing and checkpointing events.
     * @param checkpointStore An instance of `CheckpointStore`. See &commat;azure/eventhubs-checkpointstore-blob for an implementation.
     * For production, choose an implementation that will store checkpoints and partition ownership details to a durable store.
     * @param options A set of options to configure the Event Processor
     * - `maxBatchSize`         : The max size of the batch of events passed each time to user code for processing.
     * - `maxWaitTimeInSeconds` : The maximum amount of time to wait to build up the requested message count before
     * passing the data to user code for processing. If not provided, it defaults to 60 seconds.
     */
    constructor(consumerGroup, _eventHubClient, _subscriptionEventHandlers, _checkpointStore, options) {
        this._eventHubClient = _eventHubClient;
        this._subscriptionEventHandlers = _subscriptionEventHandlers;
        this._checkpointStore = _checkpointStore;
        this._isRunning = false;
        this._loopIntervalInMs = 10000;
        this._inactiveTimeLimitInMs = 60000;
        if (options.ownerId) {
            this._id = options.ownerId;
            logger.verbose(`Starting event processor with ID ${this._id}`);
        }
        else {
            this._id = uuid();
            logger.verbose(`Starting event processor with autogenerated ID ${this._id}`);
        }
        this._consumerGroup = consumerGroup;
        this._processorOptions = options;
        this._pumpManager =
            options.pumpManager || new PumpManagerImpl(this._id, this._processorOptions);
        const inactiveTimeLimitInMS = options.inactiveTimeLimitInMs || this._inactiveTimeLimitInMs;
        this._processingTarget =
            options.processingTarget || new FairPartitionLoadBalancer(inactiveTimeLimitInMS);
        if (options.loopIntervalInMs) {
            this._loopIntervalInMs = options.loopIntervalInMs;
        }
    }
    /**
     * The unique identifier for the EventProcessor.
     *
     * @return {string}
     */
    get id() {
        return this._id;
    }
    _createPartitionOwnershipRequest(partitionOwnershipMap, partitionIdToClaim) {
        const previousPartitionOwnership = partitionOwnershipMap.get(partitionIdToClaim);
        const partitionOwnership = {
            ownerId: this._id,
            partitionId: partitionIdToClaim,
            fullyQualifiedNamespace: this._eventHubClient.fullyQualifiedNamespace,
            consumerGroup: this._consumerGroup,
            eventHubName: this._eventHubClient.eventHubName,
            etag: previousPartitionOwnership ? previousPartitionOwnership.etag : undefined
        };
        return partitionOwnership;
    }
    /*
     * Claim ownership of the given partition if it's available
     */
    _claimOwnership(ownershipRequest, abortSignal) {
        return __awaiter(this, void 0, void 0, function* () {
            if (abortSignal.aborted) {
                logger.verbose(`[${this._id}] Subscription was closed before claiming ownership of ${ownershipRequest.partitionId}.`);
                return;
            }
            logger.info(`[${this._id}] Attempting to claim ownership of partition ${ownershipRequest.partitionId}.`);
            try {
                const claimedOwnerships = yield this._checkpointStore.claimOwnership([ownershipRequest]);
                // can happen if the partition was claimed out from underneath us - we shouldn't
                // attempt to spin up a processor.
                if (!claimedOwnerships.length) {
                    return;
                }
                logger.info(`[${this._id}] Successfully claimed ownership of partition ${ownershipRequest.partitionId}.`);
                yield this._startPump(ownershipRequest.partitionId, abortSignal);
            }
            catch (err) {
                logger.warning(`[${this.id}] Failed to claim ownership of partition ${ownershipRequest.partitionId}`);
                logErrorStackTrace(err);
                yield this._handleSubscriptionError(err);
            }
        });
    }
    _startPump(partitionId, abortSignal) {
        return __awaiter(this, void 0, void 0, function* () {
            if (abortSignal.aborted) {
                logger.verbose(`[${this._id}] The subscription was closed before starting to read from ${partitionId}.`);
                return;
            }
            if (this._pumpManager.isReceivingFromPartition(partitionId)) {
                logger.verbose(`[${this._id}] There is already an active partitionPump for partition "${partitionId}", skipping pump creation.`);
                return;
            }
            logger.verbose(`[${this._id}] [${partitionId}] Calling user-provided PartitionProcessorFactory.`);
            const partitionProcessor = new PartitionProcessor(this._subscriptionEventHandlers, this._checkpointStore, {
                fullyQualifiedNamespace: this._eventHubClient.fullyQualifiedNamespace,
                eventHubName: this._eventHubClient.eventHubName,
                consumerGroup: this._consumerGroup,
                partitionId: partitionId,
                eventProcessorId: this.id
            });
            const eventPosition = yield this._getStartingPosition(partitionId);
            yield this._pumpManager.createPump(eventPosition, this._eventHubClient, partitionProcessor, abortSignal);
            logger.verbose(`[${this._id}] PartitionPump created successfully.`);
        });
    }
    _getStartingPosition(partitionIdToClaim) {
        return __awaiter(this, void 0, void 0, function* () {
            const availableCheckpoints = yield this._checkpointStore.listCheckpoints(this._eventHubClient.fullyQualifiedNamespace, this._eventHubClient.eventHubName, this._consumerGroup);
            const validCheckpoints = availableCheckpoints.filter((chk) => chk.partitionId === partitionIdToClaim);
            if (validCheckpoints.length > 0) {
                return { offset: validCheckpoints[0].offset };
            }
            logger.verbose(`No checkpoint found for partition ${partitionIdToClaim}. Looking for fallback.`);
            return getStartPosition(partitionIdToClaim, this._processorOptions.startPosition);
        });
    }
    _runLoopForSinglePartition(partitionId, abortSignal) {
        return __awaiter(this, void 0, void 0, function* () {
            while (!abortSignal.aborted) {
                try {
                    yield this._startPump(partitionId, abortSignal);
                }
                catch (err) {
                    logger.warning(`[${this._id}] An error occured within the EventProcessor loop: ${err}`);
                    logErrorStackTrace(err);
                    yield this._handleSubscriptionError(err);
                }
                finally {
                    // sleep for some time after which we can attempt to create a pump again.
                    logger.verbose(`[${this._id}] Pausing the EventProcessor loop for ${this._loopIntervalInMs} ms.`);
                    // swallow errors from delay since it's fine for delay to exit early
                    yield delayWithoutThrow(this._loopIntervalInMs, abortSignal);
                }
            }
            this._isRunning = false;
        });
    }
    /**
     * Every loop to this method will result in this EventProcessor owning at most one new partition.
     *
     * The load is considered balanced when no active EventProcessor owns 2 partitions more than any other active
     * EventProcessor. Given that each invocation to this method results in ownership claim of at most one partition,
     * this algorithm converges gradually towards a steady state.
     *
     * When a new partition is claimed, this method is also responsible for starting a partition pump that creates an
     * EventHubConsumer for processing events from that partition.
     */
    _runLoopWithLoadBalancing(loadBalancer, abortSignal) {
        return __awaiter(this, void 0, void 0, function* () {
            // periodically check if there is any partition not being processed and process it
            while (!abortSignal.aborted) {
                try {
                    const partitionOwnershipMap = new Map();
                    // Retrieve current partition ownership details from the datastore.
                    const partitionOwnership = yield this._checkpointStore.listOwnership(this._eventHubClient.fullyQualifiedNamespace, this._eventHubClient.eventHubName, this._consumerGroup);
                    const abandonedMap = new Map();
                    for (const ownership of partitionOwnership) {
                        if (isAbandoned(ownership)) {
                            abandonedMap.set(ownership.partitionId, ownership);
                            continue;
                        }
                        partitionOwnershipMap.set(ownership.partitionId, ownership);
                    }
                    const partitionIds = yield this._eventHubClient.getPartitionIds({
                        abortSignal: abortSignal
                    });
                    if (abortSignal.aborted) {
                        return;
                    }
                    if (partitionIds.length > 0) {
                        const partitionsToClaim = loadBalancer.loadBalance(this._id, partitionOwnershipMap, partitionIds);
                        if (partitionsToClaim) {
                            for (const partitionToClaim of partitionsToClaim) {
                                let ownershipRequest;
                                if (abandonedMap.has(partitionToClaim)) {
                                    ownershipRequest = this._createPartitionOwnershipRequest(abandonedMap, partitionToClaim);
                                }
                                else {
                                    ownershipRequest = this._createPartitionOwnershipRequest(partitionOwnershipMap, partitionToClaim);
                                }
                                yield this._claimOwnership(ownershipRequest, abortSignal);
                            }
                        }
                    }
                }
                catch (err) {
                    logger.warning(`[${this._id}] An error occured within the EventProcessor loop: ${err}`);
                    logErrorStackTrace(err);
                    yield this._handleSubscriptionError(err);
                }
                finally {
                    // sleep for some time, then continue the loop again.
                    logger.verbose(`[${this._id}] Pausing the EventProcessor loop for ${this._loopIntervalInMs} ms.`);
                    // swallow the error since it's fine to exit early from delay
                    yield delayWithoutThrow(this._loopIntervalInMs, abortSignal);
                }
            }
            this._isRunning = false;
        });
    }
    /**
     * This is called when there are errors that are not specific to a partition (ex: load balancing)
     */
    _handleSubscriptionError(err) {
        return __awaiter(this, void 0, void 0, function* () {
            // filter out any internal "expected" errors
            if (err.name === "AbortError") {
                return;
            }
            if (this._subscriptionEventHandlers.processError) {
                try {
                    yield this._subscriptionEventHandlers.processError(err, {
                        fullyQualifiedNamespace: this._eventHubClient.fullyQualifiedNamespace,
                        eventHubName: this._eventHubClient.eventHubName,
                        consumerGroup: this._consumerGroup,
                        partitionId: "",
                        updateCheckpoint: () => __awaiter(this, void 0, void 0, function* () { })
                    });
                }
                catch (err) {
                    logger.verbose(`[${this._id}] An error was thrown from the user's processError handler: ${err}`);
                }
            }
        });
    }
    /**
     * Starts the `EventProcessor`. Based on the number of instances of `EventProcessor` that are running for the
     * same consumer group, the partitions are distributed among these instances to process events.
     *
     * For each partition, the user provided `PartitionProcessor` is instantiated.
     *
     * Subsequent calls to start will be ignored if this event processor is already running.
     * Calling `start()` after `stop()` is called will restart this event processor.
     *
     * @return {void}
     */
    start() {
        if (this._isRunning) {
            logger.verbose(`[${this._id}] Attempted to start an already running EventProcessor.`);
            return;
        }
        this._isRunning = true;
        this._abortController = new AbortController();
        logger.verbose(`[${this._id}] Starting an EventProcessor.`);
        if (targetWithoutOwnership(this._processingTarget)) {
            logger.verbose(`[${this._id}] Single partition target: ${this._processingTarget}`);
            this._loopTask = this._runLoopForSinglePartition(this._processingTarget, this._abortController.signal);
        }
        else {
            logger.verbose(`[${this._id}] Multiple partitions, using load balancer`);
            this._loopTask = this._runLoopWithLoadBalancing(this._processingTarget, this._abortController.signal);
        }
    }
    isRunning() {
        return this._isRunning;
    }
    /**
     * Stops processing events for all partitions owned by this event processor.
     * All `PartitionProcessor` will be shutdown and any open resources will be closed.
     *
     * Subsequent calls to stop will be ignored if the event processor is not running.
     *
     */
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            logger.verbose(`[${this._id}] Stopping an EventProcessor.`);
            if (this._abortController) {
                // cancel the event processor loop
                this._abortController.abort();
            }
            try {
                // remove all existing pumps
                yield this._pumpManager.removeAllPumps(CloseReason.Shutdown);
                // waits for the event processor loop to complete
                // will complete immediately if _loopTask is undefined
                if (this._loopTask) {
                    yield this._loopTask;
                }
            }
            catch (err) {
                logger.verbose(`[${this._id}] An error occured while stopping the EventProcessor: ${err}`);
            }
            finally {
                logger.verbose(`[${this._id}] EventProcessor stopped.`);
            }
            if (targetWithoutOwnership(this._processingTarget)) {
                logger.verbose(`[${this._id}] No partitions owned, skipping abandoning.`);
            }
            else {
                yield this.abandonPartitionOwnerships();
            }
        });
    }
    abandonPartitionOwnerships() {
        return __awaiter(this, void 0, void 0, function* () {
            logger.verbose(`[${this._id}] Abandoning owned partitions`);
            const allOwnerships = yield this._checkpointStore.listOwnership(this._eventHubClient.fullyQualifiedNamespace, this._eventHubClient.eventHubName, this._consumerGroup);
            const ourOwnerships = allOwnerships.filter((ownership) => ownership.ownerId === this._id);
            // unclaim any partitions that we currently own
            for (const ownership of ourOwnerships) {
                ownership.ownerId = "";
            }
            return this._checkpointStore.claimOwnership(ourOwnerships);
        });
    }
}
function isAbandoned(ownership) {
    return ownership.ownerId === "";
}
function getStartPosition(partitionIdToClaim, startPositions) {
    if (startPositions == null) {
        return latestEventPosition;
    }
    if (isEventPosition(startPositions)) {
        return startPositions;
    }
    const startPosition = startPositions[partitionIdToClaim];
    if (startPosition == null) {
        return latestEventPosition;
    }
    return startPosition;
}
function targetWithoutOwnership(target) {
    return typeof target === "string";
}
//# sourceMappingURL=eventProcessor.js.map