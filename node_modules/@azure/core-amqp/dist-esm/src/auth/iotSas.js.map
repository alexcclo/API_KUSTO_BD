{"version":3,"file":"iotSas.js","sourceRoot":"","sources":["../../../src/auth/iotSas.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAElC,OAAO,EAAE,mBAAmB,EAAE,MAAM,OAAO,CAAC;AAE5C,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAEhC;;;;GAIG;AACH,MAAM,OAAO,sBAAuB,SAAQ,mBAAmB;IAC7D;;;;;OAKG;IACH,QAAQ,CAAC,QAAgB;QACvB,OAAO,IAAI,CAAC,YAAY,CACtB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,IAAI,EACpC,QAAQ,EACR,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAChC,CAAC;IACJ,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { SharedKeyCredential } from \"./sas\";\nimport { AccessToken } from \"@azure/core-auth\";\nimport { Buffer } from \"buffer\";\n\n/**\n * @class IotSharedKeyCredential\n * @ignore\n * Defines the IotSharedKeyCredential for IotHub.\n */\nexport class IotSharedKeyCredential extends SharedKeyCredential {\n  /**\n   * Gets the sas token for the specified audience for IotHub.\n   * @ignore\n   * @param {string} [audience] - The audience for which the token is desired. If not\n   * provided then the Endpoint from the connection string will be applied.\n   */\n  getToken(audience: string): AccessToken {\n    return this._createToken(\n      Math.floor(Date.now() / 1000) + 3600,\n      audience,\n      Buffer.from(this.key, \"base64\")\n    );\n  }\n}\n"]}