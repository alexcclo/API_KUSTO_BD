{"version":3,"file":"sas.js","sourceRoot":"","sources":["../../../src/auth/sas.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAElC,OAAO,EAAE,qBAAqB,EAAmC,MAAM,eAAe,CAAC;AAEvF,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAChC,OAAO,QAAQ,MAAM,WAAW,CAAC;AACjC,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B;;;GAGG;AACH,MAAM,OAAO,mBAAmB;IAW9B;;;;;OAKG;IACH,YAAY,OAAe,EAAE,GAAW;QACtC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACjB,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,QAAgB;QACvB,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC3E,CAAC;IAED;;;;;OAKG;IACO,YAAY,CACpB,MAAc,EACd,QAAgB,EAChB,SAA2B;QAE3B,QAAQ,GAAG,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QACxC,MAAM,OAAO,GAAG,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACjD,MAAM,YAAY,GAAG,QAAQ,GAAG,IAAI,GAAG,MAAM,CAAC;QAC9C,SAAS,GAAG,SAAS,IAAI,IAAI,CAAC,GAAG,CAAC;QAClC,IAAI,MAAW,CAAC;QAChB,IAAI,QAAQ,CAAC,SAAS,CAAC,EAAE;YACvB,MAAM,GAAG,IAAI,KAAK,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;YAC7C,MAAM,CAAC,UAAU,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;YAC5C,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;SAC1C;aAAM;YACL,MAAM,GAAG,IAAI,KAAK,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;YACtC,MAAM,CAAC,UAAU,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;YACrC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;SAC7B;QACD,MAAM,GAAG,GAAG,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QACtD,OAAO;YACL,KAAK,EAAE,4BAA4B,QAAQ,QAAQ,GAAG,OAAO,MAAM,QAAQ,OAAO,EAAE;YACpF,kBAAkB,EAAE,MAAM;SAC3B,CAAC;IACJ,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,oBAAoB,CAAC,gBAAwB;QAClD,MAAM,MAAM,GAAG,qBAAqB,CAAkC,gBAAgB,CAAC,CAAC;QACxF,OAAO,IAAI,mBAAmB,CAAC,MAAM,CAAC,mBAAmB,EAAE,MAAM,CAAC,eAAe,CAAC,CAAC;IACrF,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { parseConnectionString, ServiceBusConnectionStringModel } from \"../util/utils\";\nimport { AccessToken } from \"@azure/core-auth\";\nimport { Buffer } from \"buffer\";\nimport isBuffer from \"is-buffer\";\nimport jssha from \"jssha\";\n\n/**\n * @class SharedKeyCredential\n * Defines the SharedKeyCredential .\n */\nexport class SharedKeyCredential {\n  /**\n   * @property {string} keyName - The name of the EventHub/ServiceBus key.\n   */\n  keyName: string;\n\n  /**\n   * @property {string} key - The secret value associated with the above EventHub/ServiceBus key.\n   */\n  key: string;\n\n  /**\n   * Initializes a new instance of SharedKeyCredential\n   * @constructor\n   * @param {string} keyName - The name of the EventHub/ServiceBus key.\n   * @param {string} key - The secret value associated with the above EventHub/ServiceBus key\n   */\n  constructor(keyName: string, key: string) {\n    this.keyName = keyName;\n    this.key = key;\n  }\n\n  /**\n   * Gets the sas token for the specified audience\n   * @param {string} [audience] - The audience for which the token is desired.\n   */\n  getToken(audience: string): AccessToken {\n    return this._createToken(Math.floor(Date.now() / 1000) + 3600, audience);\n  }\n\n  /**\n   * Creates the sas token based on the provided information\n   * @param {string | number} expiry - The time period in unix time after which the token will expire.\n   * @param {string} [audience] - The audience for which the token is desired.\n   * @param {string | Buffer} [hashInput] The input to be provided to hmac to create the hash.\n   */\n  protected _createToken(\n    expiry: number,\n    audience: string,\n    hashInput?: string | Buffer\n  ): AccessToken {\n    audience = encodeURIComponent(audience);\n    const keyName = encodeURIComponent(this.keyName);\n    const stringToSign = audience + \"\\n\" + expiry;\n    hashInput = hashInput || this.key;\n    let shaObj: any;\n    if (isBuffer(hashInput)) {\n      shaObj = new jssha(\"SHA-256\", \"ARRAYBUFFER\");\n      shaObj.setHMACKey(hashInput, \"ARRAYBUFFER\");\n      shaObj.update(Buffer.from(stringToSign));\n    } else {\n      shaObj = new jssha(\"SHA-256\", \"TEXT\");\n      shaObj.setHMACKey(hashInput, \"TEXT\");\n      shaObj.update(stringToSign);\n    }\n    const sig = encodeURIComponent(shaObj.getHMAC(\"B64\"));\n    return {\n      token: `SharedAccessSignature sr=${audience}&sig=${sig}&se=${expiry}&skn=${keyName}`,\n      expiresOnTimestamp: expiry\n    };\n  }\n\n  /**\n   * Creates a token provider from the EventHub/ServiceBus connection string;\n   * @param {string} connectionString - The EventHub/ServiceBus connection string\n   */\n  static fromConnectionString(connectionString: string): SharedKeyCredential {\n    const parsed = parseConnectionString<ServiceBusConnectionStringModel>(connectionString);\n    return new SharedKeyCredential(parsed.SharedAccessKeyName, parsed.SharedAccessKey);\n  }\n}\n"]}