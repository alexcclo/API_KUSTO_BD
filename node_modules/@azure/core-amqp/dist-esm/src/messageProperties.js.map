{"version":3,"file":"messageProperties.js","sourceRoot":"","sources":["../../src/messageProperties.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { MessageProperties as AmqpMessageProperties } from \"rhea-promise\";\nimport { logger } from \"./log\";\n\n/**\n * Describes the defined set of standard properties of the message.\n */\nexport interface MessageProperties {\n  /**\n   * @property {string | number | Buffer} [messageId] The application message identifier that uniquely idenitifes a message.\n   * The user is responsible for making sure that this is unique in the given context. Guids usually make a good fit.\n   */\n  messageId?: string | number | Buffer;\n  /**\n   * @property {string} [replyTo] The address of the node to send replies to.\n   */\n  replyTo?: string;\n  /**\n   * @property {string} [to] The address of the node the message is destined for.\n   */\n  to?: string;\n  /**\n   * @property {string | number | Buffer} [correlationId] The id that can be used to mark or identify messages between clients.\n   */\n  correlationId?: string | number | Buffer;\n  /**\n   * @property {string} [contentType] MIME type for the message.\n   */\n  contentType?: string;\n  /**\n   * @property {string} [contentEncoding] The content-encoding property is used as a modifier to the content-type.\n   * When present, its valueindicates what additional content encodings have been applied to the application-data.\n   */\n  contentEncoding?: string;\n  /**\n   * @property {number} [absoluteExpiryTime] The time when this message is considered expired.\n   */\n  absoluteExpiryTime?: number;\n  /**\n   * @property {number} [creationTime] The time this message was created.\n   */\n  creationTime?: number;\n  /**\n   * @property {string} [groupId] The group this message belongs to.\n   */\n  groupId?: string;\n  /**\n   * @property {number} [groupSequence] The sequence number of this message with its group.\n   */\n  groupSequence?: number;\n  /**\n   * @property {string} [replyToGroupId] The group the reply message belongs to.\n   */\n  replyToGroupId?: string;\n  /**\n   * @property {string} [subject] A common field for summary information about the message\n   * content and purpose.\n   */\n  subject?: string;\n  /**\n   * @property {string} [userId] The identity of the user responsible for producing the message.\n   */\n  userId?: string;\n}\n\n/**\n * Describes the operations that can be performed on the amqp message properties.\n * @module MessageProperties\n */\nexport namespace MessageProperties {\n  /**\n   * Converts MessageProperties to AmqpMessageProperties.\n   * @param {MessageProperties} props Message properties.\n   * @returns {AmqpMessageProperties} AmqpMessageProperties.\n   */\n  export function toAmqpMessageProperties(props: MessageProperties): AmqpMessageProperties {\n    const amqpProperties: AmqpMessageProperties = {};\n    if (props.absoluteExpiryTime != undefined) {\n      amqpProperties.absolute_expiry_time = props.absoluteExpiryTime;\n    }\n    if (props.contentEncoding != undefined) {\n      amqpProperties.content_encoding = props.contentEncoding;\n    }\n    if (props.contentType != undefined) {\n      amqpProperties.content_type = props.contentType;\n    }\n    if (props.correlationId != undefined) {\n      amqpProperties.correlation_id = props.correlationId;\n    }\n    if (props.creationTime != undefined) {\n      amqpProperties.creation_time = props.creationTime;\n    }\n    if (props.groupId != undefined) {\n      amqpProperties.group_id = props.groupId;\n    }\n    if (props.groupSequence != undefined) {\n      amqpProperties.group_sequence = props.groupSequence;\n    }\n    if (props.messageId != undefined) {\n      amqpProperties.message_id = props.messageId;\n    }\n    if (props.replyTo != undefined) {\n      amqpProperties.reply_to = props.replyTo;\n    }\n    if (props.replyToGroupId != undefined) {\n      amqpProperties.reply_to_group_id = props.replyToGroupId;\n    }\n    if (props.subject != undefined) {\n      amqpProperties.subject = props.subject;\n    }\n    if (props.to != undefined) {\n      amqpProperties.to = props.to;\n    }\n    if (props.userId != undefined) {\n      amqpProperties.user_id = props.userId;\n    }\n\n    logger.verbose(\"To AmqpMessageProperties: %O\", amqpProperties);\n    return amqpProperties;\n  }\n\n  /**\n   * Converts AmqpMessageProperties to MessageProperties.\n   * @param {AmqpMessageProperties} props Amqp message properties.\n   * @returns {MessageProperties} MessageProperties.\n   */\n  export function fromAmqpMessageProperties(props: AmqpMessageProperties): MessageProperties {\n    const msgProperties: MessageProperties = {};\n    if (props.absolute_expiry_time != undefined) {\n      msgProperties.absoluteExpiryTime = props.absolute_expiry_time;\n    }\n    if (props.content_encoding != undefined) {\n      msgProperties.contentEncoding = props.content_encoding;\n    }\n    if (props.content_type != undefined) {\n      msgProperties.contentType = props.content_type;\n    }\n    if (props.correlation_id != undefined) {\n      msgProperties.correlationId = props.correlation_id;\n    }\n    if (props.creation_time != undefined) {\n      msgProperties.creationTime = props.creation_time;\n    }\n    if (props.group_id != undefined) {\n      msgProperties.groupId = props.group_id;\n    }\n    if (props.group_sequence != undefined) {\n      msgProperties.groupSequence = props.group_sequence;\n    }\n    if (props.message_id != undefined) {\n      msgProperties.messageId = props.message_id;\n    }\n    if (props.reply_to != undefined) {\n      msgProperties.replyTo = props.reply_to;\n    }\n    if (props.reply_to_group_id != undefined) {\n      msgProperties.replyToGroupId = props.reply_to_group_id;\n    }\n    if (props.subject != undefined) {\n      msgProperties.subject = props.subject;\n    }\n    if (props.to != undefined) {\n      msgProperties.to = props.to;\n    }\n    if (props.user_id != undefined) {\n      msgProperties.userId = props.user_id;\n    }\n\n    logger.verbose(\"From AmqpMessageProperties: %O\", msgProperties);\n    return msgProperties;\n  }\n}\n"]}