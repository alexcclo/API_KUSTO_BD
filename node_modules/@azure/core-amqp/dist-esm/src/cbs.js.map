{"version":3,"file":"cbs.js","sourceRoot":"","sources":["../../src/cbs.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TokenType } from \"./auth/token\";\nimport { AccessToken } from \"@azure/core-auth\";\nimport {\n  EventContext,\n  ReceiverOptions,\n  Message as AmqpMessage,\n  SenderEvents,\n  ReceiverEvents,\n  Connection,\n  SenderOptions,\n  generate_uuid\n} from \"rhea-promise\";\nimport { Constants } from \"./util/constants\";\nimport { logger, logErrorStackTrace } from \"./log\";\nimport { translate } from \"./errors\";\nimport { defaultLock } from \"./util/utils\";\nimport { RequestResponseLink } from \"./requestResponseLink\";\n\n/**\n * Describes the CBS Response.\n */\nexport interface CbsResponse {\n  correlationId: string;\n  statusCode: string;\n  satusDescription: string;\n}\n\n/**\n * @class CbsClient\n * Describes the EventHub/ServiceBus Cbs client that talks to the $cbs endopint over AMQP connection.\n */\nexport class CbsClient {\n  /**\n   * @property {string} endpoint CBS endpoint - \"$cbs\"\n   */\n  readonly endpoint: string = Constants.cbsEndpoint;\n  /**\n   * @property {string} replyTo CBS replyTo - The reciever link name that the service should reply to.\n   */\n  readonly replyTo: string = `${Constants.cbsReplyTo}-${generate_uuid()}`;\n  /**\n   * @property {string} cbsLock The unqiue lock name per $cbs session per connection that is used to\n   * acquire the lock for establishing a cbs session if one does not exist for an aqmp connection.\n   */\n  readonly cbsLock: string = `${Constants.negotiateCbsKey}-${generate_uuid()}`;\n  /**\n   * @property {string} connectionLock The unqiue lock name per connection that is used to\n   * acquire the lock for establishing an amqp connection if one does not exist.\n   */\n  readonly connectionLock: string;\n  /**\n   * @property {Connection} connection The AMQP connection.\n   */\n  connection: Connection;\n\n  /**\n   * CBS sender, receiver on the same session.\n   */\n  private _cbsSenderReceiverLink?: RequestResponseLink;\n\n  /**\n   * @constructor\n   * @param {Connection} connection The AMQP conection.\n   * @param {string} connectionLock A unique string (usually a guid) per connection.\n   */\n  constructor(connection: Connection, connectionLock: string) {\n    this.connection = connection;\n    this.connectionLock = connectionLock;\n  }\n\n  /**\n   * Creates a singleton instance of the CBS session if it hasn't been initialized previously on\n   * the given connection.\n   * @returns {Promise<void>} Promise<void>.\n   */\n  async init(): Promise<void> {\n    try {\n      // Acquire the lock and establish an amqp connection if it does not exist.\n      if (!this.connection.isOpen()) {\n        logger.verbose(\"The CBS client is trying to establish an AMQP connection.\");\n        await defaultLock.acquire(this.connectionLock, () => {\n          return this.connection.open();\n        });\n      }\n\n      if (!this._isCbsSenderReceiverLinkOpen()) {\n        const rxOpt: ReceiverOptions = {\n          source: {\n            address: this.endpoint\n          },\n          name: this.replyTo,\n          onSessionError: (context: EventContext) => {\n            const id = context.connection.options.id;\n            const ehError = translate(context.session!.error!);\n            logger.verbose(\n              \"[%s] An error occurred on the session for request/response links \" + \"for $cbs: %O\",\n              id,\n              ehError\n            );\n          }\n        };\n        const srOpt: SenderOptions = { target: { address: this.endpoint } };\n        logger.verbose(\n          \"[%s] Creating sender/receiver links on a session for $cbs endpoint.\",\n          this.connection.id\n        );\n        this._cbsSenderReceiverLink = await RequestResponseLink.create(\n          this.connection,\n          srOpt,\n          rxOpt\n        );\n        this._cbsSenderReceiverLink.sender.on(SenderEvents.senderError, (context: EventContext) => {\n          const id = context.connection.options.id;\n          const ehError = translate(context.sender!.error!);\n          logger.verbose(\"[%s] An error occurred on the cbs sender link.. %O\", id, ehError);\n        });\n        this._cbsSenderReceiverLink.receiver.on(\n          ReceiverEvents.receiverError,\n          (context: EventContext) => {\n            const id = context.connection.options.id;\n            const ehError = translate(context.receiver!.error!);\n            logger.verbose(\"[%s] An error occurred on the cbs receiver link.. %O\", id, ehError);\n          }\n        );\n        logger.verbose(\n          \"[%s] Successfully created the cbs sender '%s' and receiver '%s' \" +\n            \"links over cbs session.\",\n          this.connection.id,\n          this._cbsSenderReceiverLink.sender.name,\n          this._cbsSenderReceiverLink.receiver.name\n        );\n      } else {\n        logger.verbose(\n          \"[%s] CBS session is already present. Reusing the cbs sender '%s' \" +\n            \"and receiver '%s' links over cbs session.\",\n          this.connection.id,\n          this._cbsSenderReceiverLink!.sender.name,\n          this._cbsSenderReceiverLink!.receiver.name\n        );\n      }\n    } catch (err) {\n      err = translate(err);\n      logger.warning(\n        \"[%s] An error occured while establishing the cbs links: %O\",\n        this.connection.id,\n        err\n      );\n      logErrorStackTrace(err);\n      throw err;\n    }\n  }\n\n  /**\n   * Negotiates the CBS claim with the EventHub/ServiceBus Service.\n   * @param {string} audience The entity token audience for which the token is requested in one\n   * of the following forms:\n   *\n   * - **ServiceBus**\n   *    - **Sender**\n   *        - `\"sb://<yournamespace>.servicebus.windows.net/<queue-name>\"`\n   *        - `\"sb://<yournamespace>.servicebus.windows.net/<topic-name>\"`\n   *\n   *    - **Receiver**\n   *         - `\"sb://<yournamespace>.servicebus.windows.net/<queue-name>\"`\n   *         - `\"sb://<yournamespace>.servicebus.windows.net/<topic-name>\"`\n   *\n   *    - **ManagementClient**\n   *         - `\"sb://<your-namespace>.servicebus.windows.net/<queue-name>/$management\"`.\n   *         - `\"sb://<your-namespace>.servicebus.windows.net/<topic-name>/$management\"`.\n   *\n   * - **EventHubs**\n   *     - **Sender**\n   *          - `\"sb://<yournamespace>.servicebus.windows.net/<hubName>\"`\n   *          - `\"sb://<yournamespace>.servicebus.windows.net/<hubName>/Partitions/<partitionId>\"`.\n   *\n   *     - **Receiver**\n   *         - `\"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/ConsumerGroups/<consumer-group-name>/Partitions/<partition-id>\"`.\n   *\n   *     - **ManagementClient**\n   *         - `\"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/$management\"`.\n   * @param {TokenInfo} tokenObject The token object that needs to be sent in the put-token request.\n   * @return {Promise<any>} Returns a Promise that resolves when $cbs authentication is successful\n   * and rejects when an error occurs during $cbs authentication.\n   */\n  async negotiateClaim(\n    audience: string,\n    tokenObject: AccessToken,\n    tokenType: TokenType\n  ): Promise<CbsResponse> {\n    try {\n      const request: AmqpMessage = {\n        body: tokenObject.token,\n        message_id: generate_uuid(),\n        reply_to: this.replyTo,\n        to: this.endpoint,\n        application_properties: {\n          operation: Constants.operationPutToken,\n          name: audience,\n          type: tokenType\n        }\n      };\n      const responseMessage = await this._cbsSenderReceiverLink!.sendRequest(request);\n      logger.verbose(\"[%s] The CBS response is: %O\", this.connection.id, responseMessage);\n      return this._fromAmqpMessageResponse(responseMessage);\n    } catch (err) {\n      logger.warning(\n        \"[%s] An error occurred while negotiating the cbs claim: %O\",\n        this.connection.id,\n        err\n      );\n      logErrorStackTrace(err);\n      throw err;\n    }\n  }\n\n  /**\n   * Closes the AMQP cbs session to the EventHub/ServiceBus for this client,\n   * returning a promise that will be resolved when disconnection is completed.\n   * @return {Promise<void>}\n   */\n  async close(): Promise<void> {\n    try {\n      if (this._isCbsSenderReceiverLinkOpen()) {\n        const cbsLink = this._cbsSenderReceiverLink;\n        this._cbsSenderReceiverLink = undefined;\n        await cbsLink!.close();\n        logger.verbose(\"[%s] Successfully closed the cbs session.\", this.connection.id);\n      }\n    } catch (err) {\n      const msg = `An error occurred while closing the cbs link: ${err.stack ||\n        JSON.stringify(err)}.`;\n      logger.verbose(\"[%s] %s\", this.connection.id, msg);\n      throw new Error(msg);\n    }\n  }\n\n  /**\n   * Removes the AMQP cbs session to the EventHub/ServiceBus for this client,\n   * @returns {void} void\n   */\n  remove(): void {\n    try {\n      if (this._cbsSenderReceiverLink) {\n        const cbsLink = this._cbsSenderReceiverLink;\n        this._cbsSenderReceiverLink = undefined;\n        cbsLink!.remove();\n        logger.verbose(\"[%s] Successfully removed the cbs session.\", this.connection.id);\n      }\n    } catch (err) {\n      const msg = `An error occurred while removing the cbs link: ${err.stack ||\n        JSON.stringify(err)}.`;\n      logger.verbose(\"[%s] %s\", this.connection.id, msg);\n      throw new Error(msg);\n    }\n  }\n\n  /**\n   * Indicates whether the cbs sender receiver link is open or closed.\n   * @return {boolean} `true` open, `false` closed.\n   */\n  private _isCbsSenderReceiverLinkOpen(): boolean {\n    return this._cbsSenderReceiverLink! && this._cbsSenderReceiverLink!.isOpen();\n  }\n\n  private _fromAmqpMessageResponse(msg: AmqpMessage): CbsResponse {\n    const cbsResponse = {\n      correlationId: msg.correlation_id! as string,\n      statusCode: msg.application_properties ? msg.application_properties[\"status-code\"] : \"\",\n      satusDescription: msg.application_properties\n        ? msg.application_properties[\"status-description\"]\n        : \"\"\n    };\n    logger.verbose(\"[%s] The deserialized CBS response is: %o\", this.connection.id, cbsResponse);\n    return cbsResponse;\n  }\n}\n"]}