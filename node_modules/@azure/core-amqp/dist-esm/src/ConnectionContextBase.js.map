{"version":3,"file":"ConnectionContextBase.js","sourceRoot":"","sources":["../../src/ConnectionContextBase.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Connection, ConnectionOptions, generate_uuid } from \"rhea-promise\";\nimport { CbsClient } from \"./cbs\";\nimport { DataTransformer, DefaultDataTransformer } from \"./dataTransformer\";\nimport { TokenCredential } from \"@azure/core-auth\";\nimport { ConnectionConfig } from \"./connectionConfig/connectionConfig\";\nimport { SharedKeyCredential } from \"./auth/sas\";\n\nimport { Constants } from \"./util/constants\";\nimport { getPlatformInfo, getFrameworkInfo } from \"./util/runtimeInfo\";\nimport { isNode } from \"./util/utils\";\n\n/**\n * Provides contextual information like the underlying amqp connection, cbs session, tokenProvider,\n * Connection config, data transformer, etc.\n */\nexport interface ConnectionContextBase {\n  /**\n   * @property {ConnectionConfig} config The EventHub connection config that is created after\n   * parsing the connection string.\n   */\n  readonly config: ConnectionConfig;\n  /**\n   * @property {string} connectionLock The unqiue lock name per connection that is used to\n   * acquire the lock for establishing an aqmp connection per client if one does not exist.\n   */\n  connectionLock: string;\n  /**\n   * @property {string} negotiateClaimLock The unqiue lock name per connection that is used to\n   * acquire the lock for negotiating cbs claim by an entity on that connection.\n   */\n  negotiateClaimLock: string;\n  /**\n   * @property {SharedKeyCredential | TokenCredential} tokenCredential The credential to be used for getting tokens\n   * for authentication for the EventHub client.\n   */\n  readonly tokenCredential: SharedKeyCredential | TokenCredential;\n  /**\n   * @property {Connection} connection The underlying AMQP connection.\n   */\n  connection: Connection;\n  /**\n   * @property {string} connectionId The amqp connection id that uniquely identifies the\n   * connection within a process.\n   */\n  connectionId: string;\n  /**\n   * @property {boolean} wasConnectionCloseCalled Indicates whether the close() method was\n   * called on the connection object.\n   */\n  wasConnectionCloseCalled: boolean;\n  /**\n   * @property {DataTransformer} dataTransformer A DataTransformer object that has methods named\n   * - encode Responsible for encoding the AMQP message before sending it on the wire.\n   * - decode Responsible for decoding the received AMQP message before passing it to the customer.\n   */\n  dataTransformer: DataTransformer;\n  /**\n   * @property {CbsClient} cbsSession A reference to the cbs session ($cbs endpoint) on the\n   * underlying AMQP connection for the EventHub Client.\n   */\n  cbsSession: CbsClient;\n  /**\n   * Updates the context to use a new underlying AMQP connection and new cbs session.\n   */\n  refreshConnection: () => void;\n}\n\n/**\n * Defines the properties that need to be set while establishing the AMQP connection.\n */\nexport interface ConnectionProperties {\n  /**\n   * @property {string} product The name of the product that will be populated as the AMQP\n   * connection property. Example: \"MSJSClient\".\n   */\n  product: string;\n  /**\n   * @property {string} version The version of the package/sdk that is making the AMQP connection.\n   */\n  version: string;\n  /**\n   * @property {string} userAgent The userAgent that needs to be set as the AMQP connection\n   * property. Example: `\"/js-service-bus\"` or `\"/js-event-hubs,/js-event-processor-host=1.0.0\"`.\n   */\n  userAgent: string;\n}\n\n/**\n * Describes the parameters that can be provided to create the base connection context.\n */\nexport interface CreateConnectionContextBaseParameters {\n  /**\n   * @property {ConnectionConfig} config The connection config that is created by parsing the\n   * connection string.\n   */\n  config: ConnectionConfig;\n  /**\n   * @property {ConnectionProperties} connectionProperties Properties to be provided while creating\n   * the AMQP connection.\n   */\n  connectionProperties: ConnectionProperties;\n  /**\n   * @property {SharedKeyCredential | TokenCredential} [tokenCredential] The credential to be used for Authentication.\n   * Default value: SharedKeyCredentials.\n   */\n  tokenCredential?: SharedKeyCredential | TokenCredential;\n  /**\n   * @property {DataTransformer} [dataTransformer] The datatransformer to be used for encoding and\n   * decoding messages. Default value: DefaultDataTransformer\n   */\n  dataTransformer?: DataTransformer;\n  /**\n   * @property {boolean} [isEntityPathRequired] Determines whether entity path should be a part of\n   * the connection config. If `true` it must be present, `false` otherwise. Default value false.\n   */\n  isEntityPathRequired?: boolean;\n  /**\n   * @property {number} [operationTimeoutInMs] - The duration in which the promise should\n   * complete (resolve/reject). If it is not completed, then the Promise will be rejected after\n   * timeout occurs. Default: `60000 milliseconds`.\n   */\n  operationTimeoutInMs?: number;\n}\n\nexport module ConnectionContextBase {\n  /**\n   * Creates the base connection context.\n   * @param {CreateConnectionContextBaseParameters} parameters Parameters to be provided to create\n   * the base connection context.\n   */\n  export function create(parameters: CreateConnectionContextBaseParameters): ConnectionContextBase {\n    ConnectionConfig.validate(parameters.config, {\n      isEntityPathRequired: parameters.isEntityPathRequired || false\n    });\n    const userAgent = parameters.connectionProperties.userAgent;\n    if (userAgent.length > Constants.maxUserAgentLength) {\n      throw new Error(\n        `The user-agent string cannot be more than ${Constants.maxUserAgentLength} characters in length.` +\n          `The given user-agent string is: ${userAgent} with length: ${userAgent.length}`\n      );\n    }\n\n    const connectionOptions: ConnectionOptions = {\n      transport: Constants.TLS,\n      host: parameters.config.host,\n      hostname: parameters.config.host,\n      username: parameters.config.sharedAccessKeyName,\n      port: 5671,\n      reconnect: false,\n      properties: {\n        product: parameters.connectionProperties.product,\n        version: parameters.connectionProperties.version,\n        \"user-agent\": userAgent,\n        platform: getPlatformInfo(),\n        framework: getFrameworkInfo()\n      },\n      idle_time_out: Constants.defaultConnectionIdleTimeoutInMs,\n      operationTimeoutInSeconds: parameters.operationTimeoutInMs\n        ? parameters.operationTimeoutInMs / 1000\n        : undefined\n    };\n\n    if (\n      parameters.config.webSocket ||\n      (!isNode && typeof window !== \"undefined\" && (window as any).WebSocket)\n    ) {\n      const socket = parameters.config.webSocket || (window as any).WebSocket;\n      const host = parameters.config.host;\n      const endpoint = parameters.config.webSocketEndpointPath || \"\";\n      const socketOptions = parameters.config.webSocketConstructorOptions || {};\n\n      connectionOptions.webSocketOptions = {\n        webSocket: socket,\n        url: `wss://${host}:443/${endpoint}`,\n        protocol: [\"AMQPWSB10\"],\n        options: socketOptions\n      };\n    }\n\n    const connection = new Connection(connectionOptions);\n    const connectionLock = `${Constants.establishConnection}-${generate_uuid()}`;\n    const connectionContextBase: ConnectionContextBase = {\n      wasConnectionCloseCalled: false,\n      connectionLock: connectionLock,\n      negotiateClaimLock: `${Constants.negotiateClaim}-${generate_uuid()}`,\n      connection: connection,\n      connectionId: connection.id,\n      cbsSession: new CbsClient(connection, connectionLock),\n      config: parameters.config,\n      tokenCredential:\n        parameters.tokenCredential ||\n        new SharedKeyCredential(\n          parameters.config.sharedAccessKeyName,\n          parameters.config.sharedAccessKey\n        ),\n      dataTransformer: parameters.dataTransformer || new DefaultDataTransformer(),\n      refreshConnection() {\n        const connection = new Connection(connectionOptions);\n        const connectionLock = `${Constants.establishConnection}-${generate_uuid()}`;\n        this.wasConnectionCloseCalled = false;\n        this.connectionLock = connectionLock;\n        this.negotiateClaimLock = `${Constants.negotiateClaim} - ${generate_uuid()}`;\n        this.connection = connection;\n        this.connectionId = connection.id;\n        this.cbsSession = new CbsClient(connection, connectionLock);\n      }\n    };\n\n    return connectionContextBase;\n  }\n}\n"]}