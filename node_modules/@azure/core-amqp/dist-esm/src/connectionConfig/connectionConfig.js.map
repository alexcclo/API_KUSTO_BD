{"version":3,"file":"connectionConfig.js","sourceRoot":"","sources":["../../../src/connectionConfig/connectionConfig.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAElC,OAAO,EAAE,qBAAqB,EAAmC,MAAM,eAAe,CAAC;AAiEvF;;;GAGG;AACH,MAAM,KAAW,gBAAgB,CAuEhC;AAvED,WAAiB,gBAAgB;IAC/B;;;;;;;;OAQG;IACH,SAAgB,MAAM,CAAC,gBAAwB,EAAE,IAAa;QAC5D,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;QAE5C,MAAM,QAAQ,GAAG,qBAAqB,CAAkC,gBAAgB,CAAC,CAAC;QAC1F,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACtB,MAAM,IAAI,SAAS,CAAC,wCAAwC,CAAC,CAAC;SAC/D;QAED,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC;YAAE,QAAQ,CAAC,QAAQ,IAAI,GAAG,CAAC;QAE/D,MAAM,MAAM,GAAqB;YAC/B,gBAAgB,EAAE,gBAAgB;YAClC,QAAQ,EAAE,QAAQ,CAAC,QAAQ;YAC3B,IAAI,EAAE,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YAC7F,mBAAmB,EAAE,QAAQ,CAAC,mBAAmB;YACjD,eAAe,EAAE,QAAQ,CAAC,eAAe;SAC1C,CAAC;QAEF,IAAI,IAAI,IAAI,QAAQ,CAAC,UAAU,EAAE;YAC/B,MAAM,CAAC,UAAU,GAAG,IAAI,IAAI,QAAQ,CAAC,UAAU,CAAC;SACjD;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAtBe,uBAAM,SAsBrB,CAAA;IAED;;;;OAIG;IACH,SAAgB,QAAQ,CAAC,MAAwB,EAAE,OAAiC;QAClF,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,EAAE,CAAC;QAE3B,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,IAAI,SAAS,CAAC,uBAAuB,CAAC,CAAC;SAC9C;QAED,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YACpB,MAAM,IAAI,SAAS,CAAC,qCAAqC,CAAC,CAAC;SAC5D;QACD,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAE1C,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;YAChB,MAAM,IAAI,SAAS,CAAC,iCAAiC,CAAC,CAAC;SACxD;QACD,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAElC,IAAI,OAAO,CAAC,oBAAoB,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE;YACtD,MAAM,IAAI,SAAS,CAAC,uCAAuC,CAAC,CAAC;SAC9D;QACD,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAE9C,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE;YAC/B,MAAM,IAAI,SAAS,CAAC,gDAAgD,CAAC,CAAC;SACvE;QACD,MAAM,CAAC,mBAAmB,GAAG,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QAEhE,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE;YAC3B,MAAM,IAAI,SAAS,CAAC,4CAA4C,CAAC,CAAC;SACnE;QACD,MAAM,CAAC,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;IAC1D,CAAC;IA/Be,yBAAQ,WA+BvB,CAAA;AACH,CAAC,EAvEgB,gBAAgB,KAAhB,gBAAgB,QAuEhC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { parseConnectionString, ServiceBusConnectionStringModel } from \"../util/utils\";\nimport { WebSocketImpl } from \"rhea-promise\";\n\n/**\n * Describes the options that can be provided while creating a connection config.\n */\nexport interface ConnectionConfigOptions {\n  /**\n   * @property {boolean} [isEntityPathRequired] Indicates whether the entity path is required in the\n   * connection config.\n   */\n  isEntityPathRequired?: boolean;\n}\n\n/**\n * Describes the connection config object that is created after parsing an EventHub or ServiceBus\n * connection string.\n */\nexport interface ConnectionConfig {\n  /**\n   * @property {string} endpoint - The service bus endpoint\n   * \"sb://<yournamespace>.servicebus.windows.net/\".\n   */\n  endpoint: string;\n  /**\n   * @property {string} host - The host \"<yournamespace>.servicebus.windows.net\".\n   */\n  host: string;\n  /**\n   * @property {string} connectionString - The connection string.\n   */\n  connectionString: string;\n  /**\n   * @property {string} entityPath - The name/path of the entity (hub/queue/topic name) to which the\n   * connection needs to happen.\n   */\n  entityPath?: string;\n  /**\n   * @property {string} sharedAccessKeyName - The name of the access key.\n   */\n  sharedAccessKeyName: string;\n  /**\n   * @property {string} sharedAccessKey - The secret value of the access key.\n   */\n  sharedAccessKey: string;\n\n  /**\n   * @property {WebSocketImpl} [webSocket] - The WebSocket constructor used to create an AMQP connection\n   * over a WebSocket. In browsers, the built-in WebSocket will be  used by default. In Node, a\n   * TCP socket will be used if a WebSocket constructor is not provided.\n   */\n  webSocket?: WebSocketImpl;\n\n  /**\n   * @property {string} [webSocketEndpointPath] - The path for the endpoint that accepts an AMQP\n   * connection over WebSockets.\n   */\n  webSocketEndpointPath?: string;\n\n  /**\n   * @property {any} [webSocketConstructorOptions] - Options to be passed to the WebSocket constructor\n   */\n  webSocketConstructorOptions?: any;\n}\n\n/**\n * Describes the ConnectionConfig module\n * @module ConnectionConfig\n */\nexport namespace ConnectionConfig {\n  /**\n   * Creates the connection config.\n   * @param {string} connectionString - The connection string for a given service like\n   * EventHub/ServiceBus.\n   * @param {string} [path]           - The name/path of the entity (hub name) to which the\n   * connection needs to happen. This will override the EntityPath in the connectionString\n   * if present.\n   * @returns {ConnectionConfig} ConnectionConfig\n   */\n  export function create(connectionString: string, path?: string): ConnectionConfig {\n    connectionString = String(connectionString);\n\n    const parsedCS = parseConnectionString<ServiceBusConnectionStringModel>(connectionString);\n    if (!parsedCS.Endpoint) {\n      throw new TypeError(\"Missing Endpoint in Connection String.\");\n    }\n\n    if (!parsedCS.Endpoint.endsWith(\"/\")) parsedCS.Endpoint += \"/\";\n\n    const result: ConnectionConfig = {\n      connectionString: connectionString,\n      endpoint: parsedCS.Endpoint,\n      host: parsedCS && parsedCS.Endpoint ? (parsedCS.Endpoint.match(\".*://([^/]*)\") || [])[1] : \"\",\n      sharedAccessKeyName: parsedCS.SharedAccessKeyName,\n      sharedAccessKey: parsedCS.SharedAccessKey\n    };\n\n    if (path || parsedCS.EntityPath) {\n      result.entityPath = path || parsedCS.EntityPath;\n    }\n    return result;\n  }\n\n  /**\n   * Validates the properties of connection config.\n   * @param {ConnectionConfig} config The connection config to be validated.\n   * @returns {void} void\n   */\n  export function validate(config: ConnectionConfig, options?: ConnectionConfigOptions): void {\n    if (!options) options = {};\n\n    if (!config) {\n      throw new TypeError(\"Missing configuration\");\n    }\n\n    if (!config.endpoint) {\n      throw new TypeError(\"Missing 'endpoint' in configuration\");\n    }\n    config.endpoint = String(config.endpoint);\n\n    if (!config.host) {\n      throw new TypeError(\"Missing 'host' in configuration\");\n    }\n    config.host = String(config.host);\n\n    if (options.isEntityPathRequired && !config.entityPath) {\n      throw new TypeError(\"Missing 'entityPath' in configuration\");\n    }\n    config.entityPath = String(config.entityPath);\n\n    if (!config.sharedAccessKeyName) {\n      throw new TypeError(\"Missing 'sharedAccessKeyName' in configuration\");\n    }\n    config.sharedAccessKeyName = String(config.sharedAccessKeyName);\n\n    if (!config.sharedAccessKey) {\n      throw new TypeError(\"Missing 'sharedAccessKey' in configuration\");\n    }\n    config.sharedAccessKey = String(config.sharedAccessKey);\n  }\n}\n"]}