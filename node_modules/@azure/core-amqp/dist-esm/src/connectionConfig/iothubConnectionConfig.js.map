{"version":3,"file":"iothubConnectionConfig.js","sourceRoot":"","sources":["../../../src/connectionConfig/iothubConnectionConfig.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { ConnectionConfig } from \"./connectionConfig\";\nimport { EventHubConnectionConfig } from \"./eventhubConnectionConfig\";\nimport { parseConnectionString, IotHubConnectionStringModel } from \"../util/utils\";\n\n/**\n * @ignore\n */\nexport interface IotHubConnectionConfig {\n  /**\n   * @property {string} endpoint - The iothub endpoint `\"<iothub-namespace>.azure-devices.net\"`.\n   */\n  hostName: string;\n  /**\n   * @property {string} host - The host `\"<yournamespace>\"`.\n   */\n  host: string;\n  /**\n   * @property {string} connectionString - The IotHub connection string.\n   */\n  connectionString: string;\n  /**\n   * @property {string} entityPath - The name/path of the entity to which the connection needs to happen.\n   */\n  entityPath: string;\n  /**\n   * @property {string} sharedAccessKeyName - The name of the access key.\n   */\n  sharedAccessKeyName: string;\n  /**\n   * @property {string} sharedAccessKey - The secret value of the access key.\n   */\n  sharedAccessKey: string;\n  /**\n   * @property {string} [deviceId] - The unique device identifier.\n   */\n  deviceId?: string;\n}\n\n/**\n * @module IotHubConnectionConfig\n * @ignore\n */\nexport namespace IotHubConnectionConfig {\n  /**\n   * Creates the connection config.\n   * @ignore\n   * @param {string} connectionString - The event hub connection string\n   * @param {string} [path]           - The name/path of the entity (hub name) to which the connection needs to happen\n   */\n  export function create(connectionString: string, path?: string): IotHubConnectionConfig {\n    connectionString = String(connectionString);\n\n    const parsedCS = parseConnectionString<IotHubConnectionStringModel>(connectionString);\n    if (!path) {\n      path = \"messages/events\";\n    }\n    const result: IotHubConnectionConfig = {\n      connectionString: connectionString,\n      hostName: parsedCS.HostName,\n      host: parsedCS && parsedCS.HostName ? parsedCS.HostName.split(\".\")[0] : \"\",\n      entityPath: path,\n      sharedAccessKeyName: parsedCS.SharedAccessKeyName,\n      sharedAccessKey: parsedCS.SharedAccessKey,\n      deviceId: parsedCS.DeviceId\n    };\n    return result;\n  }\n\n  /**\n   * Validates the properties of connection config.\n   * @ignore\n   * @param {ConnectionConfig} config The connection config to be validated.\n   */\n  export function validate(config: IotHubConnectionConfig): void {\n    if (!config) {\n      throw new TypeError(\"Missing configuration\");\n    }\n\n    if (!config.hostName) {\n      throw new TypeError(\"Missing 'hostName' in configuration\");\n    }\n    config.hostName = String(config.hostName);\n\n    if (!config.entityPath) {\n      throw new TypeError(\"Missing 'entityPath' in configuration\");\n    }\n    config.entityPath = String(config.entityPath);\n\n    if (!config.sharedAccessKeyName) {\n      throw new TypeError(\"Missing 'sharedAccessKeyName' in configuration\");\n    }\n    config.sharedAccessKeyName = String(config.sharedAccessKeyName);\n\n    if (!config.sharedAccessKey) {\n      throw new TypeError(\"Missing 'sharedAccessKey' in configuration\");\n    }\n    config.sharedAccessKey = String(config.sharedAccessKey);\n\n    if (config.deviceId) {\n      config.deviceId = String(config.deviceId);\n    }\n  }\n  /**\n   * Convert iothub connection config to eventhub connection config.\n   * @ignore\n   * @param {IotHubConnectionConfig} iotHubConfig\n   */\n  export function convertToEventHubConnectionConfig(\n    iotHubConfig: IotHubConnectionConfig\n  ): EventHubConnectionConfig {\n    validate(iotHubConfig);\n    const config: ConnectionConfig = {\n      sharedAccessKey: iotHubConfig.sharedAccessKey,\n      sharedAccessKeyName: iotHubConfig.sharedAccessKeyName,\n      entityPath: iotHubConfig.entityPath,\n      host: iotHubConfig.hostName,\n      // `sb://` prefix to match with the endpoint in the connection string from the portal\n      endpoint: `sb://${iotHubConfig.hostName}/`,\n      connectionString: iotHubConfig.connectionString\n    };\n    return EventHubConnectionConfig.createFromConnectionConfig(config);\n  }\n}\n"]}