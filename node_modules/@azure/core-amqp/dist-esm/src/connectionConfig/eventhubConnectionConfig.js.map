{"version":3,"file":"eventhubConnectionConfig.js","sourceRoot":"","sources":["../../../src/connectionConfig/eventhubConnectionConfig.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAElC,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AA2DtD;;;;;GAKG;AACH,MAAM,KAAQ,wBAAwB,CAkFrC;AAlFD,WAAc,wBAAwB;IACpC;;;;;;;;OAQG;IACH,SAAgB,MAAM,CAAC,gBAAwB,EAAE,IAAa;QAC5D,MAAM,MAAM,GAAG,gBAAgB,CAAC,MAAM,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;QAC/D,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE;YACtB,MAAM,IAAI,SAAS,CACjB,qDAAqD,gBAAgB,KAAK;gBACxE,iDAAiD,CACpD,CAAC;SACH;QACD,OAAO,0BAA0B,CAAC,MAAM,CAAC,CAAC;IAC5C,CAAC;IATe,+BAAM,SASrB,CAAA;IAED;;;;;OAKG;IACH,SAAgB,0BAA0B,CAAC,MAAwB;QACjE,gBAAgB,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC,CAAC;QAEjE,MAAmC,CAAC,qBAAqB,GAAG,GAAG,EAAE;YAChE,OAAO,GAAG,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,UAAU,cAAc,CAAC;QAC9D,CAAC,CAAC;QACD,MAAmC,CAAC,oBAAoB,GAAG,GAAG,EAAE;YAC/D,OAAO,GAAG,MAAM,CAAC,UAAU,cAAc,CAAC;QAC5C,CAAC,CAAC;QAED,MAAmC,CAAC,iBAAiB,GAAG,CAAC,WAA6B,EAAE,EAAE;YACzF,IAAI,WAAW,IAAI,SAAS,EAAE;gBAC5B,OAAO,GAAG,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,UAAU,eAAe,WAAW,EAAE,CAAC;aAC3E;iBAAM;gBACL,OAAO,GAAG,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;aACjD;QACH,CAAC,CAAC;QAED,MAAmC,CAAC,gBAAgB,GAAG,CAAC,WAA6B,EAAE,EAAE;YACxF,IAAI,WAAW,IAAI,SAAS,EAAE;gBAC5B,OAAO,GAAG,MAAM,CAAC,UAAU,eAAe,WAAW,EAAE,CAAC;aACzD;iBAAM;gBACL,OAAO,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;aAC/B;QACH,CAAC,CAAC;QAED,MAAmC,CAAC,mBAAmB,GAAG,CACzD,WAA4B,EAC5B,aAAsB,EACtB,EAAE;YACF,IAAI,CAAC,aAAa;gBAAE,aAAa,GAAG,UAAU,CAAC;YAC/C,OAAO,CACL,GAAG,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,UAAU,mBAAmB,aAAa,GAAG;gBACzE,cAAc,WAAW,EAAE,CAC5B,CAAC;QACJ,CAAC,CAAC;QAED,MAAmC,CAAC,kBAAkB,GAAG,CACxD,WAA4B,EAC5B,aAAsB,EACtB,EAAE;YACF,IAAI,CAAC,aAAa;gBAAE,aAAa,GAAG,UAAU,CAAC;YAC/C,OAAO,GAAG,MAAM,CAAC,UAAU,mBAAmB,aAAa,eAAe,WAAW,EAAE,CAAC;QAC1F,CAAC,CAAC;QACF,OAAO,MAAkC,CAAC;IAC5C,CAAC;IA7Ce,mDAA0B,6BA6CzC,CAAA;IAED;;;;OAIG;IACH,SAAgB,QAAQ,CAAC,MAAgC;QACvD,OAAO,gBAAgB,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC,CAAC;IAC3E,CAAC;IAFe,iCAAQ,WAEvB,CAAA;AACH,CAAC,EAlFa,wBAAwB,KAAxB,wBAAwB,QAkFrC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { ConnectionConfig } from \"./connectionConfig\";\n\n/**\n * Describes the connection config object that is created after parsing an EventHub connection\n * string. It also provides some convenience methods for getting the address and audience for\n * different entities.\n */\nexport interface EventHubConnectionConfig extends ConnectionConfig {\n  /**\n   * @property {string} entityPath - The name/path of the entity (event hub name) to which the\n   * connection needs to happen.\n   */\n  entityPath: string;\n  /**\n   * Provides the EventHub Sender address in one of the following forms based on the input:\n   * - `\"<hubName>\"`\n   * - `\"<hubName>/Partitions/<partitionId>\"`\n   *\n   * @param partitionId The partitionId in the EventHub to which messages will be sent.\n   */\n  getSenderAddress(partitionId?: string | number): string;\n  /**\n   * Provides the EventHub Sender audience in one of the following forms based on the input:\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<hubName>\"`\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<hubName>/Partitions/<partitionId>\"`\n   *\n   * @param partitionId The partitionId in the EventHub to which messages will be sent.\n   */\n  getSenderAudience(partitionId?: string | number): string;\n  /**\n   * Provides the EventHub Receiver address:\n   * - `\"<hub-name>/ConsumerGroups/<consumer-group-name>/Partitions/<partition-id>\"`\n   *\n   * @param partitionId The partitionId in the EventHub from which messages will be received.\n   * @param consumergroup The consumergoup in the EventHub from which the messages will\n   * be received. Default: `$default`.\n   */\n  getReceiverAddress(partitionId: string | number, consumergroup?: string): string;\n  /**\n   * Provides the EventHub Receiver audience.\n   * - `\"sb://<your-namespace>.servicebus.windows.net/<hub-name>/ConsumerGroups/<consumer-group-name>/Partitions/<partition-id>\"`\n   *\n   * @param partitionId The partitionId in the EventHub from which messages will be received.\n   * @param consumergroup The consumergoup in the EventHub from which the messages will\n   * be received. Default: `$default`.\n   */\n  getReceiverAudience(partitionId: string | number, consumergroup?: string): string;\n  /**\n   * Provides the EventHub Management address.\n   * - `\"<hub-name>/$management\"`\n   */\n  getManagementAddress(): string;\n  /**\n   * Provides the EventHub Management audience.\n   * - `\"sb://<your-namespace>.servicebus.windows.net/<hub-name>/$management\"`\n   */\n  getManagementAudience(): string;\n}\n\n/**\n * Describes the connection config object that is created after parsing an EventHub connection\n * string. It also provides some convenience methods for getting the address and audience for\n * different entities.\n * @module EventHubConnectionConfig\n */\nexport module EventHubConnectionConfig {\n  /**\n   * Creates the connection config.\n   * @param {string} connectionString - The connection string for a given service like\n   * EventHub/ServiceBus.\n   * @param {string} [path]           - The name/path of the entity (hub name) to which the\n   * connection needs to happen. This will override the EntityPath in the connectionString\n   * if present.\n   * @returns {EventHubConnectionConfig} EventHubConnectionConfig\n   */\n  export function create(connectionString: string, path?: string): EventHubConnectionConfig {\n    const config = ConnectionConfig.create(connectionString, path);\n    if (!config.entityPath) {\n      throw new TypeError(\n        `Either provide \"path\" or the \"connectionString\": \"${connectionString}\", ` +\n          `must contain EntityPath=\"<path-to-the-entity>\".`\n      );\n    }\n    return createFromConnectionConfig(config);\n  }\n\n  /**\n   * Creates an EventHubConnectionConfig from the provided base ConnectionConfig.\n   * @param config The base connection config from which the EventHubConnectionConfig needs to be\n   * created.\n   * @returns EventHubConnectionConfig\n   */\n  export function createFromConnectionConfig(config: ConnectionConfig): EventHubConnectionConfig {\n    ConnectionConfig.validate(config, { isEntityPathRequired: true });\n\n    (config as EventHubConnectionConfig).getManagementAudience = () => {\n      return `${config.endpoint}${config.entityPath}/$management`;\n    };\n    (config as EventHubConnectionConfig).getManagementAddress = () => {\n      return `${config.entityPath}/$management`;\n    };\n\n    (config as EventHubConnectionConfig).getSenderAudience = (partitionId?: string | number) => {\n      if (partitionId != undefined) {\n        return `${config.endpoint}${config.entityPath}/Partitions/${partitionId}`;\n      } else {\n        return `${config.endpoint}${config.entityPath}`;\n      }\n    };\n\n    (config as EventHubConnectionConfig).getSenderAddress = (partitionId?: string | number) => {\n      if (partitionId != undefined) {\n        return `${config.entityPath}/Partitions/${partitionId}`;\n      } else {\n        return `${config.entityPath}`;\n      }\n    };\n\n    (config as EventHubConnectionConfig).getReceiverAudience = (\n      partitionId: string | number,\n      consumergroup?: string\n    ) => {\n      if (!consumergroup) consumergroup = \"$default\";\n      return (\n        `${config.endpoint}${config.entityPath}/ConsumerGroups/${consumergroup}/` +\n        `Partitions/${partitionId}`\n      );\n    };\n\n    (config as EventHubConnectionConfig).getReceiverAddress = (\n      partitionId: string | number,\n      consumergroup?: string\n    ) => {\n      if (!consumergroup) consumergroup = \"$default\";\n      return `${config.entityPath}/ConsumerGroups/${consumergroup}/Partitions/${partitionId}`;\n    };\n    return config as EventHubConnectionConfig;\n  }\n\n  /**\n   * Validates the properties of connection config.\n   * @param {ConnectionConfig} config The connection config to be validated.\n   * @returns {void} void\n   */\n  export function validate(config: EventHubConnectionConfig): void {\n    return ConnectionConfig.validate(config, { isEntityPathRequired: true });\n  }\n}\n"]}