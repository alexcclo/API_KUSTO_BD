{"version":3,"file":"requestResponseLink.js","sourceRoot":"","sources":["../../src/requestResponseLink.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AbortSignalLike, AbortError } from \"@azure/abort-controller\";\nimport { Constants } from \"./util/constants\";\nimport {\n  Session,\n  Connection,\n  Sender,\n  Receiver,\n  Message as AmqpMessage,\n  EventContext,\n  AmqpError,\n  SenderOptions,\n  ReceiverOptions,\n  ReceiverEvents,\n  ReqResLink\n} from \"rhea-promise\";\nimport { translate, ConditionStatusMapper } from \"./errors\";\nimport { logger, logErrorStackTrace } from \"./log\";\n\n/**\n * Describes the options that can be specified while sending a request.\n */\nexport interface SendRequestOptions {\n  /**\n   * @property {AbortSignalLike} [abortSignal] Cancels the operation.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * @property {number} [timeoutInMs] Max time to wait for the operation to complete.\n   * Default: `60000 milliseconds`.\n   */\n  timeoutInMs?: number;\n  /**\n   * @property {string} [requestName] Name of the request being performed.\n   */\n  requestName?: string;\n}\n\n/**\n * Describes an amqp request(sender)-response(receiver) link that is created over an amqp session.\n * @class RequestResponseLink\n */\nexport class RequestResponseLink implements ReqResLink {\n  /**\n   * @constructor\n   * @param {Session} session The amqp session.\n   * @param {Sender} sender The amqp sender link.\n   * @param {Receiver} receiver The amqp receiver link.\n   */\n  constructor(public session: Session, public sender: Sender, public receiver: Receiver) {\n    this.session = session;\n    this.sender = sender;\n    this.receiver = receiver;\n  }\n\n  /**\n   * Provides the underlying amqp connection object.\n   * @returns {Connection} Connection.\n   */\n  get connection(): Connection {\n    return this.session.connection;\n  }\n\n  /**\n   * Indicates whether the session and the sender and receiver links are all open or closed.\n   * @returns {boolean} boolean - `true` - `open`, `false` - `closed`.\n   */\n  isOpen(): boolean {\n    return this.session.isOpen() && this.sender.isOpen() && this.receiver.isOpen();\n  }\n\n  /**\n   * Sends the given request message and returns the received response. If the operation is not\n   * completed in the provided timeout in milliseconds `default: 60000`, then `OperationTimeoutError` is thrown.\n   *\n   * @param {Message} request The AMQP (request) message.\n   * @param {SendRequestOptions} [options] Options that can be provided while sending a request.\n   * @returns {Promise<Message>} Promise<Message> The AMQP (response) message.\n   */\n  sendRequest(request: AmqpMessage, options: SendRequestOptions = {}): Promise<AmqpMessage> {\n    const timeoutInMs = options.timeoutInMs || Constants.defaultOperationTimeoutInMs;\n\n    const aborter: AbortSignalLike | undefined = options.abortSignal;\n\n    return new Promise<AmqpMessage>((resolve: any, reject: any) => {\n      let waitTimer: any;\n      let timeOver: boolean = false;\n      type NormalizedInfo = {\n        statusCode: number;\n        statusDescription: string;\n        errorCondition: string;\n      };\n\n      const rejectOnAbort = () => {\n        const address = this.receiver.address || \"address\";\n        const requestName = options.requestName;\n        const desc: string =\n          `[${this.connection.id}] The request \"${requestName}\" ` +\n          `to \"${address}\" has been cancelled by the user.`;\n        // Cancellation is a user-intended action, so log to info instead of warning.\n        logger.info(desc);\n        const error = new AbortError(\n          `The ${requestName ? requestName + \" \" : \"\"}operation has been cancelled by the user.`\n        );\n\n        reject(error);\n      };\n\n      const onAbort = () => {\n        // remove the event listener as this will be registered next time someone makes a request.\n        this.receiver.removeListener(ReceiverEvents.message, messageCallback);\n        // safe to clear the timeout if it hasn't already occurred.\n        if (!timeOver) {\n          clearTimeout(waitTimer);\n        }\n        aborter!.removeEventListener(\"abort\", onAbort);\n\n        rejectOnAbort();\n      };\n\n      if (aborter) {\n        // the aborter may have been triggered between request attempts\n        // so check if it was triggered and reject if needed.\n        if (aborter.aborted) {\n          return rejectOnAbort();\n        }\n        aborter.addEventListener(\"abort\", onAbort);\n      }\n\n      // Handle different variations of property names in responses emitted by EventHubs and ServiceBus.\n      const getCodeDescriptionAndError = (props: any): NormalizedInfo => {\n        if (!props) props = {};\n        return {\n          statusCode: (props[Constants.statusCode] || props.statusCode) as number,\n          statusDescription: (props[Constants.statusDescription] ||\n            props.statusDescription) as string,\n          errorCondition: (props[Constants.errorCondition] || props.errorCondition) as string\n        };\n      };\n\n      const messageCallback = (context: EventContext) => {\n        if (aborter) {\n          aborter.removeEventListener(\"abort\", onAbort);\n        }\n        const info = getCodeDescriptionAndError(context.message!.application_properties);\n        const responseCorrelationId = context.message!.correlation_id;\n        logger.verbose(\n          \"[%s] %s response: \",\n          this.connection.id,\n          request.to || \"$management\",\n          context.message\n        );\n        if (\n          request.message_id !== responseCorrelationId &&\n          request.correlation_id !== responseCorrelationId\n        ) {\n          // do not remove message listener.\n          // parallel requests listen on the same receiver, so continue waiting until respose that matches\n          // request via correlationId is found.\n          logger.verbose(\n            \"[%s] request-messageId | '%s' != '%s' | response-correlationId. \" +\n              \"Hence dropping this response and waiting for the next one.\",\n            this.connection.id,\n            request.message_id,\n            responseCorrelationId\n          );\n          return;\n        }\n\n        // remove the event listeners as they will be registered next time when someone makes a request.\n        this.receiver.removeListener(ReceiverEvents.message, messageCallback);\n        if (info.statusCode > 199 && info.statusCode < 300) {\n          if (!timeOver) {\n            clearTimeout(waitTimer);\n          }\n          logger.verbose(\n            \"[%s] request-messageId | '%s' == '%s' | response-correlationId.\",\n            this.connection.id,\n            request.message_id,\n            responseCorrelationId\n          );\n          return resolve(context.message);\n        } else {\n          const condition =\n            info.errorCondition || ConditionStatusMapper[info.statusCode] || \"amqp:internal-error\";\n          const e: AmqpError = {\n            condition: condition,\n            description: info.statusDescription\n          };\n          const error = translate(e);\n          logger.warning(error);\n          logErrorStackTrace(error);\n          return reject(error);\n        }\n      };\n\n      const actionAfterTimeout = () => {\n        timeOver = true;\n        this.receiver.removeListener(ReceiverEvents.message, messageCallback);\n        if (aborter) {\n          aborter.removeEventListener(\"abort\", onAbort);\n        }\n        const address = this.receiver.address || \"address\";\n        const desc: string =\n          `The request with message_id \"${request.message_id}\" to \"${address}\" ` +\n          `endpoint timed out. Please try again later.`;\n        const e: Error = {\n          name: \"OperationTimeoutError\",\n          message: desc\n        };\n        return reject(translate(e));\n      };\n\n      waitTimer = setTimeout(actionAfterTimeout, timeoutInMs);\n      this.receiver.on(ReceiverEvents.message, messageCallback);\n\n      logger.verbose(\n        \"[%s] %s request sent: %O\",\n        this.connection.id,\n        request.to || \"$managment\",\n        request\n      );\n      this.sender.send(request);\n    });\n  }\n\n  /**\n   * Closes the sender, receiver link and the underlying session.\n   * @returns {Promise<void>} Promise<void>\n   */\n  async close(): Promise<void> {\n    await this.sender.close();\n    await this.receiver.close();\n    await this.session.close();\n  }\n\n  /**\n   * Removes the sender, receiver link and it's underlying session.\n   * @returns {void} void\n   */\n  remove(): void {\n    this.sender.remove();\n    this.receiver.remove();\n    this.session.remove();\n  }\n\n  /**\n   * Creates an amqp request/response link.\n   *\n   * @param {Connection} connection The amqp connection.\n   * @param {SenderOptions} senderOptions Options that must be provided to create the sender link.\n   * @param {ReceiverOptions} receiverOptions Options that must be provided to create the receiver link.\n   * @returns {Promise<RequestResponseLink>} Promise<RequestResponseLink>\n   */\n  static async create(\n    connection: Connection,\n    senderOptions: SenderOptions,\n    receiverOptions: ReceiverOptions\n  ): Promise<RequestResponseLink> {\n    const session = await connection.createSession();\n    const sender = await session.createSender(senderOptions);\n    const receiver = await session.createReceiver(receiverOptions);\n    logger.verbose(\n      \"[%s] Successfully created the sender and receiver links on the same session.\",\n      connection.id\n    );\n    return new RequestResponseLink(session, sender, receiver);\n  }\n}\n"]}